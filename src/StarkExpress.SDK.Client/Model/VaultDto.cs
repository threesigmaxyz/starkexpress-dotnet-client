/*
 * StarkExpress API Docs
 *
 * An API for the StarkExpress platform.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StarkExpress.SDK.Client.Client.OpenAPIDateConverter;

namespace StarkExpress.SDK.Client.Model
{
    /// <summary>
    /// VaultDto
    /// </summary>
    [DataContract(Name = "VaultDto")]
    public partial class VaultDto : IEquatable<VaultDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VaultDto" /> class.
        /// </summary>
        /// <param name="vaultId">The ID of the vault..</param>
        /// <param name="vaultChainId">The StarkEx ID of the vault..</param>
        /// <param name="starkExAddress">The address of the StarkEx instance associated with the vault..</param>
        /// <param name="assetSymbol">The symbol of the asset associated with the vault..</param>
        /// <param name="assetStarkExId">The StarkEx ID of the asset associated with the vault..</param>
        /// <param name="userStarkKey">The STARK key of the user associated with the vault..</param>
        /// <param name="availableBalance">The available balance of the vault..</param>
        /// <param name="accountingBalance">The accounting balance of the vault..</param>
        public VaultDto(Guid vaultId = default(Guid), string vaultChainId = default(string), string starkExAddress = default(string), string assetSymbol = default(string), string assetStarkExId = default(string), string userStarkKey = default(string), string availableBalance = default(string), string accountingBalance = default(string))
        {
            this.VaultId = vaultId;
            this.VaultChainId = vaultChainId;
            this.StarkExAddress = starkExAddress;
            this.AssetSymbol = assetSymbol;
            this.AssetStarkExId = assetStarkExId;
            this.UserStarkKey = userStarkKey;
            this.AvailableBalance = availableBalance;
            this.AccountingBalance = accountingBalance;
        }

        /// <summary>
        /// The ID of the vault.
        /// </summary>
        /// <value>The ID of the vault.</value>
        [DataMember(Name = "vaultId", EmitDefaultValue = false)]
        public Guid VaultId { get; set; }

        /// <summary>
        /// The StarkEx ID of the vault.
        /// </summary>
        /// <value>The StarkEx ID of the vault.</value>
        [DataMember(Name = "vaultChainId", EmitDefaultValue = false)]
        public string VaultChainId { get; set; }

        /// <summary>
        /// The address of the StarkEx instance associated with the vault.
        /// </summary>
        /// <value>The address of the StarkEx instance associated with the vault.</value>
        [DataMember(Name = "starkExAddress", EmitDefaultValue = true)]
        public string StarkExAddress { get; set; }

        /// <summary>
        /// The symbol of the asset associated with the vault.
        /// </summary>
        /// <value>The symbol of the asset associated with the vault.</value>
        [DataMember(Name = "assetSymbol", EmitDefaultValue = true)]
        public string AssetSymbol { get; set; }

        /// <summary>
        /// The StarkEx ID of the asset associated with the vault.
        /// </summary>
        /// <value>The StarkEx ID of the asset associated with the vault.</value>
        [DataMember(Name = "assetStarkExId", EmitDefaultValue = true)]
        public string AssetStarkExId { get; set; }

        /// <summary>
        /// The STARK key of the user associated with the vault.
        /// </summary>
        /// <value>The STARK key of the user associated with the vault.</value>
        [DataMember(Name = "userStarkKey", EmitDefaultValue = true)]
        public string UserStarkKey { get; set; }

        /// <summary>
        /// The available balance of the vault.
        /// </summary>
        /// <value>The available balance of the vault.</value>
        [DataMember(Name = "availableBalance", EmitDefaultValue = false)]
        public string AvailableBalance { get; set; }

        /// <summary>
        /// The accounting balance of the vault.
        /// </summary>
        /// <value>The accounting balance of the vault.</value>
        [DataMember(Name = "accountingBalance", EmitDefaultValue = false)]
        public string AccountingBalance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VaultDto {\n");
            sb.Append("  VaultId: ").Append(VaultId).Append("\n");
            sb.Append("  VaultChainId: ").Append(VaultChainId).Append("\n");
            sb.Append("  StarkExAddress: ").Append(StarkExAddress).Append("\n");
            sb.Append("  AssetSymbol: ").Append(AssetSymbol).Append("\n");
            sb.Append("  AssetStarkExId: ").Append(AssetStarkExId).Append("\n");
            sb.Append("  UserStarkKey: ").Append(UserStarkKey).Append("\n");
            sb.Append("  AvailableBalance: ").Append(AvailableBalance).Append("\n");
            sb.Append("  AccountingBalance: ").Append(AccountingBalance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VaultDto);
        }

        /// <summary>
        /// Returns true if VaultDto instances are equal
        /// </summary>
        /// <param name="input">Instance of VaultDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VaultDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VaultId == input.VaultId ||
                    (this.VaultId != null &&
                    this.VaultId.Equals(input.VaultId))
                ) && 
                (
                    this.VaultChainId == input.VaultChainId ||
                    (this.VaultChainId != null &&
                    this.VaultChainId.Equals(input.VaultChainId))
                ) && 
                (
                    this.StarkExAddress == input.StarkExAddress ||
                    (this.StarkExAddress != null &&
                    this.StarkExAddress.Equals(input.StarkExAddress))
                ) && 
                (
                    this.AssetSymbol == input.AssetSymbol ||
                    (this.AssetSymbol != null &&
                    this.AssetSymbol.Equals(input.AssetSymbol))
                ) && 
                (
                    this.AssetStarkExId == input.AssetStarkExId ||
                    (this.AssetStarkExId != null &&
                    this.AssetStarkExId.Equals(input.AssetStarkExId))
                ) && 
                (
                    this.UserStarkKey == input.UserStarkKey ||
                    (this.UserStarkKey != null &&
                    this.UserStarkKey.Equals(input.UserStarkKey))
                ) && 
                (
                    this.AvailableBalance == input.AvailableBalance ||
                    (this.AvailableBalance != null &&
                    this.AvailableBalance.Equals(input.AvailableBalance))
                ) && 
                (
                    this.AccountingBalance == input.AccountingBalance ||
                    (this.AccountingBalance != null &&
                    this.AccountingBalance.Equals(input.AccountingBalance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VaultId != null)
                {
                    hashCode = (hashCode * 59) + this.VaultId.GetHashCode();
                }
                if (this.VaultChainId != null)
                {
                    hashCode = (hashCode * 59) + this.VaultChainId.GetHashCode();
                }
                if (this.StarkExAddress != null)
                {
                    hashCode = (hashCode * 59) + this.StarkExAddress.GetHashCode();
                }
                if (this.AssetSymbol != null)
                {
                    hashCode = (hashCode * 59) + this.AssetSymbol.GetHashCode();
                }
                if (this.AssetStarkExId != null)
                {
                    hashCode = (hashCode * 59) + this.AssetStarkExId.GetHashCode();
                }
                if (this.UserStarkKey != null)
                {
                    hashCode = (hashCode * 59) + this.UserStarkKey.GetHashCode();
                }
                if (this.AvailableBalance != null)
                {
                    hashCode = (hashCode * 59) + this.AvailableBalance.GetHashCode();
                }
                if (this.AccountingBalance != null)
                {
                    hashCode = (hashCode * 59) + this.AccountingBalance.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
