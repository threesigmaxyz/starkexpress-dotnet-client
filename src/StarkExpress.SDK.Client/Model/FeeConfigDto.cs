/*
 * StarkExpress API Docs
 *
 * An API for the StarkExpress platform.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StarkExpress.SDK.Client.Client.OpenAPIDateConverter;

namespace StarkExpress.SDK.Client.Model
{
    /// <summary>
    /// FeeConfigDto
    /// </summary>
    [DataContract(Name = "FeeConfigDto")]
    public partial class FeeConfigDto : IEquatable<FeeConfigDto>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        public FeeAction? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeeConfigDto" /> class.
        /// </summary>
        /// <param name="feeId">The unique identifier of the fee configuration..</param>
        /// <param name="action">action.</param>
        /// <param name="basisPoints">The basis points (1/100 of a percent) of the fee to take on the operation..</param>
        public FeeConfigDto(Guid feeId = default(Guid), FeeAction? action = default(FeeAction?), int basisPoints = default(int))
        {
            this.FeeId = feeId;
            this.Action = action;
            this.BasisPoints = basisPoints;
        }

        /// <summary>
        /// The unique identifier of the fee configuration.
        /// </summary>
        /// <value>The unique identifier of the fee configuration.</value>
        [DataMember(Name = "feeId", EmitDefaultValue = false)]
        public Guid FeeId { get; set; }

        /// <summary>
        /// The basis points (1/100 of a percent) of the fee to take on the operation.
        /// </summary>
        /// <value>The basis points (1/100 of a percent) of the fee to take on the operation.</value>
        [DataMember(Name = "basisPoints", EmitDefaultValue = false)]
        public int BasisPoints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FeeConfigDto {\n");
            sb.Append("  FeeId: ").Append(FeeId).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  BasisPoints: ").Append(BasisPoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeeConfigDto);
        }

        /// <summary>
        /// Returns true if FeeConfigDto instances are equal
        /// </summary>
        /// <param name="input">Instance of FeeConfigDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeeConfigDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FeeId == input.FeeId ||
                    (this.FeeId != null &&
                    this.FeeId.Equals(input.FeeId))
                ) && 
                (
                    this.Action == input.Action ||
                    this.Action.Equals(input.Action)
                ) && 
                (
                    this.BasisPoints == input.BasisPoints ||
                    this.BasisPoints.Equals(input.BasisPoints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FeeId != null)
                {
                    hashCode = (hashCode * 59) + this.FeeId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Action.GetHashCode();
                hashCode = (hashCode * 59) + this.BasisPoints.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
