/*
 * Arc API Docs
 *
 * An API for the Arc platform.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = StarkExpress.SDK.Client.Client.FileParameter;
using OpenAPIDateConverter = StarkExpress.SDK.Client.Client.OpenAPIDateConverter;

namespace StarkExpress.SDK.Client.Model
{
    /// <summary>
    /// FeeDto
    /// </summary>
    [DataContract(Name = "FeeDto")]
    public partial class FeeDto : IEquatable<FeeDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeeDto" /> class.
        /// </summary>
        /// <param name="vaultId">The vault ID of the fee sender..</param>
        /// <param name="vaultChainId">vaultChainId.</param>
        /// <param name="assetId">The StarkEx ID of the fee asset to be collected..</param>
        /// <param name="quantizedAmount">quantizedAmount.</param>
        public FeeDto(Guid vaultId = default(Guid), BigInteger vaultChainId = default(BigInteger), string assetId = default(string), BigInteger quantizedAmount = default(BigInteger))
        {
            this.VaultId = vaultId;
            this.VaultChainId = vaultChainId;
            this.AssetId = assetId;
            this.QuantizedAmount = quantizedAmount;
        }

        /// <summary>
        /// The vault ID of the fee sender.
        /// </summary>
        /// <value>The vault ID of the fee sender.</value>
        [DataMember(Name = "vaultId", EmitDefaultValue = false)]
        public Guid VaultId { get; set; }

        /// <summary>
        /// Gets or Sets VaultChainId
        /// </summary>
        [DataMember(Name = "vaultChainId", EmitDefaultValue = false)]
        public BigInteger VaultChainId { get; set; }

        /// <summary>
        /// The StarkEx ID of the fee asset to be collected.
        /// </summary>
        /// <value>The StarkEx ID of the fee asset to be collected.</value>
        [DataMember(Name = "assetId", EmitDefaultValue = true)]
        public string AssetId { get; set; }

        /// <summary>
        /// Gets or Sets QuantizedAmount
        /// </summary>
        [DataMember(Name = "quantizedAmount", EmitDefaultValue = false)]
        public BigInteger QuantizedAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FeeDto {\n");
            sb.Append("  VaultId: ").Append(VaultId).Append("\n");
            sb.Append("  VaultChainId: ").Append(VaultChainId).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  QuantizedAmount: ").Append(QuantizedAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeeDto);
        }

        /// <summary>
        /// Returns true if FeeDto instances are equal
        /// </summary>
        /// <param name="input">Instance of FeeDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeeDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VaultId == input.VaultId ||
                    (this.VaultId != null &&
                    this.VaultId.Equals(input.VaultId))
                ) && 
                (
                    this.VaultChainId == input.VaultChainId ||
                    (this.VaultChainId != null &&
                    this.VaultChainId.Equals(input.VaultChainId))
                ) && 
                (
                    this.AssetId == input.AssetId ||
                    (this.AssetId != null &&
                    this.AssetId.Equals(input.AssetId))
                ) && 
                (
                    this.QuantizedAmount == input.QuantizedAmount ||
                    (this.QuantizedAmount != null &&
                    this.QuantizedAmount.Equals(input.QuantizedAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VaultId != null)
                {
                    hashCode = (hashCode * 59) + this.VaultId.GetHashCode();
                }
                if (this.VaultChainId != null)
                {
                    hashCode = (hashCode * 59) + this.VaultChainId.GetHashCode();
                }
                if (this.AssetId != null)
                {
                    hashCode = (hashCode * 59) + this.AssetId.GetHashCode();
                }
                if (this.QuantizedAmount != null)
                {
                    hashCode = (hashCode * 59) + this.QuantizedAmount.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
