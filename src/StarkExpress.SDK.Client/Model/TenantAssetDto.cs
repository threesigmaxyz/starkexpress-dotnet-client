/*
 * Arc API Docs
 *
 * An API for the Arc platform.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = StarkExpress.SDK.Client.Client.FileParameter;
using OpenAPIDateConverter = StarkExpress.SDK.Client.Client.OpenAPIDateConverter;

namespace StarkExpress.SDK.Client.Model
{
    /// <summary>
    /// TenantAssetDto
    /// </summary>
    [DataContract(Name = "TenantAssetDto")]
    public partial class TenantAssetDto : IEquatable<TenantAssetDto>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public AssetType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TenantAssetDto" /> class.
        /// </summary>
        /// <param name="assetId">The unique identifier of the asset..</param>
        /// <param name="assetType">The asset type used for on-chain interactions..</param>
        /// <param name="address">The Ethereum address of the asset..</param>
        /// <param name="name">The name of the asset..</param>
        /// <param name="symbol">The symbol of the asset..</param>
        /// <param name="quantum">The quantum of the asset..</param>
        /// <param name="type">type.</param>
        /// <param name="enabled">Is the asset enabled for the given tenant.</param>
        /// <param name="confirmed">Has the asset register transaction been confirmed in the Blockchain.</param>
        public TenantAssetDto(Guid assetId = default(Guid), string assetType = default(string), string address = default(string), string name = default(string), string symbol = default(string), string quantum = default(string), AssetType? type = default(AssetType?), bool enabled = default(bool), bool confirmed = default(bool))
        {
            this.AssetId = assetId;
            this.AssetType = assetType;
            this.Address = address;
            this.Name = name;
            this.Symbol = symbol;
            this.Quantum = quantum;
            this.Type = type;
            this.Enabled = enabled;
            this.Confirmed = confirmed;
        }

        /// <summary>
        /// The unique identifier of the asset.
        /// </summary>
        /// <value>The unique identifier of the asset.</value>
        [DataMember(Name = "assetId", EmitDefaultValue = false)]
        public Guid AssetId { get; set; }

        /// <summary>
        /// The asset type used for on-chain interactions.
        /// </summary>
        /// <value>The asset type used for on-chain interactions.</value>
        [DataMember(Name = "assetType", EmitDefaultValue = true)]
        public string AssetType { get; set; }

        /// <summary>
        /// The Ethereum address of the asset.
        /// </summary>
        /// <value>The Ethereum address of the asset.</value>
        [DataMember(Name = "address", EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// The name of the asset.
        /// </summary>
        /// <value>The name of the asset.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The symbol of the asset.
        /// </summary>
        /// <value>The symbol of the asset.</value>
        [DataMember(Name = "symbol", EmitDefaultValue = true)]
        public string Symbol { get; set; }

        /// <summary>
        /// The quantum of the asset.
        /// </summary>
        /// <value>The quantum of the asset.</value>
        [DataMember(Name = "quantum", EmitDefaultValue = false)]
        public string Quantum { get; set; }

        /// <summary>
        /// Is the asset enabled for the given tenant
        /// </summary>
        /// <value>Is the asset enabled for the given tenant</value>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Has the asset register transaction been confirmed in the Blockchain
        /// </summary>
        /// <value>Has the asset register transaction been confirmed in the Blockchain</value>
        [DataMember(Name = "confirmed", EmitDefaultValue = true)]
        public bool Confirmed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TenantAssetDto {\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  AssetType: ").Append(AssetType).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Quantum: ").Append(Quantum).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Confirmed: ").Append(Confirmed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TenantAssetDto);
        }

        /// <summary>
        /// Returns true if TenantAssetDto instances are equal
        /// </summary>
        /// <param name="input">Instance of TenantAssetDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TenantAssetDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AssetId == input.AssetId ||
                    (this.AssetId != null &&
                    this.AssetId.Equals(input.AssetId))
                ) && 
                (
                    this.AssetType == input.AssetType ||
                    (this.AssetType != null &&
                    this.AssetType.Equals(input.AssetType))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Quantum == input.Quantum ||
                    (this.Quantum != null &&
                    this.Quantum.Equals(input.Quantum))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.Confirmed == input.Confirmed ||
                    this.Confirmed.Equals(input.Confirmed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssetId != null)
                {
                    hashCode = (hashCode * 59) + this.AssetId.GetHashCode();
                }
                if (this.AssetType != null)
                {
                    hashCode = (hashCode * 59) + this.AssetType.GetHashCode();
                }
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                }
                if (this.Quantum != null)
                {
                    hashCode = (hashCode * 59) + this.Quantum.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                hashCode = (hashCode * 59) + this.Confirmed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
