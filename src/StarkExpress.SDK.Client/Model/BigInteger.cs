/*
 * Arc API Docs
 *
 * An API for the Arc platform.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = StarkExpress.SDK.Client.Client.FileParameter;
using OpenAPIDateConverter = StarkExpress.SDK.Client.Client.OpenAPIDateConverter;

namespace StarkExpress.SDK.Client.Model
{
    /// <summary>
    /// BigInteger
    /// </summary>
    [DataContract(Name = "BigInteger")]
    public partial class BigInteger : IEquatable<BigInteger>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BigInteger" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public BigInteger()
        {
        }

        /// <summary>
        /// Gets or Sets BitCount
        /// </summary>
        [DataMember(Name = "bitCount", EmitDefaultValue = false)]
        public int BitCount { get; private set; }

        /// <summary>
        /// Returns false as BitCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBitCount()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets BitLength
        /// </summary>
        [DataMember(Name = "bitLength", EmitDefaultValue = false)]
        public int BitLength { get; private set; }

        /// <summary>
        /// Returns false as BitLength should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBitLength()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IntValue
        /// </summary>
        [DataMember(Name = "intValue", EmitDefaultValue = false)]
        public int IntValue { get; private set; }

        /// <summary>
        /// Returns false as IntValue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIntValue()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IntValueExact
        /// </summary>
        [DataMember(Name = "intValueExact", EmitDefaultValue = false)]
        public int IntValueExact { get; private set; }

        /// <summary>
        /// Returns false as IntValueExact should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIntValueExact()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets LongValue
        /// </summary>
        [DataMember(Name = "longValue", EmitDefaultValue = false)]
        public long LongValue { get; private set; }

        /// <summary>
        /// Returns false as LongValue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLongValue()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets LongValueExact
        /// </summary>
        [DataMember(Name = "longValueExact", EmitDefaultValue = false)]
        public long LongValueExact { get; private set; }

        /// <summary>
        /// Returns false as LongValueExact should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLongValueExact()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets SignValue
        /// </summary>
        [DataMember(Name = "signValue", EmitDefaultValue = false)]
        public int SignValue { get; private set; }

        /// <summary>
        /// Returns false as SignValue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSignValue()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BigInteger {\n");
            sb.Append("  BitCount: ").Append(BitCount).Append("\n");
            sb.Append("  BitLength: ").Append(BitLength).Append("\n");
            sb.Append("  IntValue: ").Append(IntValue).Append("\n");
            sb.Append("  IntValueExact: ").Append(IntValueExact).Append("\n");
            sb.Append("  LongValue: ").Append(LongValue).Append("\n");
            sb.Append("  LongValueExact: ").Append(LongValueExact).Append("\n");
            sb.Append("  SignValue: ").Append(SignValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BigInteger);
        }

        /// <summary>
        /// Returns true if BigInteger instances are equal
        /// </summary>
        /// <param name="input">Instance of BigInteger to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BigInteger input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BitCount == input.BitCount ||
                    this.BitCount.Equals(input.BitCount)
                ) && 
                (
                    this.BitLength == input.BitLength ||
                    this.BitLength.Equals(input.BitLength)
                ) && 
                (
                    this.IntValue == input.IntValue ||
                    this.IntValue.Equals(input.IntValue)
                ) && 
                (
                    this.IntValueExact == input.IntValueExact ||
                    this.IntValueExact.Equals(input.IntValueExact)
                ) && 
                (
                    this.LongValue == input.LongValue ||
                    this.LongValue.Equals(input.LongValue)
                ) && 
                (
                    this.LongValueExact == input.LongValueExact ||
                    this.LongValueExact.Equals(input.LongValueExact)
                ) && 
                (
                    this.SignValue == input.SignValue ||
                    this.SignValue.Equals(input.SignValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.BitCount.GetHashCode();
                hashCode = (hashCode * 59) + this.BitLength.GetHashCode();
                hashCode = (hashCode * 59) + this.IntValue.GetHashCode();
                hashCode = (hashCode * 59) + this.IntValueExact.GetHashCode();
                hashCode = (hashCode * 59) + this.LongValue.GetHashCode();
                hashCode = (hashCode * 59) + this.LongValueExact.GetHashCode();
                hashCode = (hashCode * 59) + this.SignValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
