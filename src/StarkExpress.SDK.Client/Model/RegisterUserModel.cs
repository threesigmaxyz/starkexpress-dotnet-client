/*
 * StarkExpress API Docs
 *
 * An API for the StarkExpress platform.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StarkExpress.SDK.Client.Client.OpenAPIDateConverter;

namespace StarkExpress.SDK.Client.Model
{
    /// <summary>
    /// RegisterUserModel
    /// </summary>
    [DataContract(Name = "RegisterUserModel")]
    public partial class RegisterUserModel : IEquatable<RegisterUserModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterUserModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RegisterUserModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterUserModel" /> class.
        /// </summary>
        /// <param name="username">The username of the user. (required).</param>
        /// <param name="starkKey">The STARK key of the user. (required).</param>
        /// <param name="starkSignature">starkSignature (required).</param>
        /// <param name="address">The Ethereum address associated with the user. (required).</param>
        /// <param name="eip712Signature">The EIP-712 Signature of the Username, Stark Key and Address. (required).</param>
        public RegisterUserModel(string username = default(string), string starkKey = default(string), SignatureModel starkSignature = default(SignatureModel), string address = default(string), string eip712Signature = default(string))
        {
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new ArgumentNullException("username is a required property for RegisterUserModel and cannot be null");
            }
            this.Username = username;
            // to ensure "starkKey" is required (not null)
            if (starkKey == null)
            {
                throw new ArgumentNullException("starkKey is a required property for RegisterUserModel and cannot be null");
            }
            this.StarkKey = starkKey;
            // to ensure "starkSignature" is required (not null)
            if (starkSignature == null)
            {
                throw new ArgumentNullException("starkSignature is a required property for RegisterUserModel and cannot be null");
            }
            this.StarkSignature = starkSignature;
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for RegisterUserModel and cannot be null");
            }
            this.Address = address;
            // to ensure "eip712Signature" is required (not null)
            if (eip712Signature == null)
            {
                throw new ArgumentNullException("eip712Signature is a required property for RegisterUserModel and cannot be null");
            }
            this.Eip712Signature = eip712Signature;
        }

        /// <summary>
        /// The username of the user.
        /// </summary>
        /// <value>The username of the user.</value>
        [DataMember(Name = "username", IsRequired = true, EmitDefaultValue = true)]
        public string Username { get; set; }

        /// <summary>
        /// The STARK key of the user.
        /// </summary>
        /// <value>The STARK key of the user.</value>
        [DataMember(Name = "starkKey", IsRequired = true, EmitDefaultValue = true)]
        public string StarkKey { get; set; }

        /// <summary>
        /// Gets or Sets StarkSignature
        /// </summary>
        [DataMember(Name = "starkSignature", IsRequired = true, EmitDefaultValue = true)]
        public SignatureModel StarkSignature { get; set; }

        /// <summary>
        /// The Ethereum address associated with the user.
        /// </summary>
        /// <value>The Ethereum address associated with the user.</value>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// The EIP-712 Signature of the Username, Stark Key and Address.
        /// </summary>
        /// <value>The EIP-712 Signature of the Username, Stark Key and Address.</value>
        [DataMember(Name = "eip712Signature", IsRequired = true, EmitDefaultValue = true)]
        public string Eip712Signature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RegisterUserModel {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  StarkKey: ").Append(StarkKey).Append("\n");
            sb.Append("  StarkSignature: ").Append(StarkSignature).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Eip712Signature: ").Append(Eip712Signature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegisterUserModel);
        }

        /// <summary>
        /// Returns true if RegisterUserModel instances are equal
        /// </summary>
        /// <param name="input">Instance of RegisterUserModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegisterUserModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.StarkKey == input.StarkKey ||
                    (this.StarkKey != null &&
                    this.StarkKey.Equals(input.StarkKey))
                ) && 
                (
                    this.StarkSignature == input.StarkSignature ||
                    (this.StarkSignature != null &&
                    this.StarkSignature.Equals(input.StarkSignature))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Eip712Signature == input.Eip712Signature ||
                    (this.Eip712Signature != null &&
                    this.Eip712Signature.Equals(input.Eip712Signature))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                if (this.StarkKey != null)
                {
                    hashCode = (hashCode * 59) + this.StarkKey.GetHashCode();
                }
                if (this.StarkSignature != null)
                {
                    hashCode = (hashCode * 59) + this.StarkSignature.GetHashCode();
                }
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.Eip712Signature != null)
                {
                    hashCode = (hashCode * 59) + this.Eip712Signature.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Username (string) maxLength
            if (this.Username != null && this.Username.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Username, length must be less than 30.", new [] { "Username" });
            }

            // Username (string) minLength
            if (this.Username != null && this.Username.Length < 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Username, length must be greater than 6.", new [] { "Username" });
            }

            // StarkKey (string) minLength
            if (this.StarkKey != null && this.StarkKey.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StarkKey, length must be greater than 1.", new [] { "StarkKey" });
            }

            // Address (string) minLength
            if (this.Address != null && this.Address.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Address, length must be greater than 1.", new [] { "Address" });
            }

            // Eip712Signature (string) minLength
            if (this.Eip712Signature != null && this.Eip712Signature.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Eip712Signature, length must be greater than 1.", new [] { "Eip712Signature" });
            }

            yield break;
        }
    }

}
