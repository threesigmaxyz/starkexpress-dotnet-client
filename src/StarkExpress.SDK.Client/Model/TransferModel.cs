/*
 * StarkExpress API Docs
 *
 * An API for the StarkExpress platform.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StarkExpress.SDK.Client.Client.OpenAPIDateConverter;

namespace StarkExpress.SDK.Client.Model
{
    /// <summary>
    /// Request model to transfer assets between users.
    /// </summary>
    [DataContract(Name = "TransferModel")]
    public partial class TransferModel : IEquatable<TransferModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransferModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferModel" /> class.
        /// </summary>
        /// <param name="senderVaultId">The unique identifier of the transfer sender vault. (required).</param>
        /// <param name="receiverVaultId">The unique identifier of the transfer recipient vault. (required).</param>
        /// <param name="quantizedAmount">The amount of the asset to be transferred, in quantized form. (required).</param>
        /// <param name="expirationTimestamp">The timestamp at which this transfer becomes invalid, in seconds since the Unix epoch. (required).</param>
        /// <param name="nonce">The unique nonce for the transfer. (required).</param>
        /// <param name="signature">signature (required).</param>
        public TransferModel(Guid senderVaultId = default(Guid), Guid receiverVaultId = default(Guid), string quantizedAmount = default(string), long expirationTimestamp = default(long), int nonce = default(int), SignatureModel signature = default(SignatureModel))
        {
            this.SenderVaultId = senderVaultId;
            this.ReceiverVaultId = receiverVaultId;
            // to ensure "quantizedAmount" is required (not null)
            if (quantizedAmount == null)
            {
                throw new ArgumentNullException("quantizedAmount is a required property for TransferModel and cannot be null");
            }
            this.QuantizedAmount = quantizedAmount;
            this.ExpirationTimestamp = expirationTimestamp;
            this.Nonce = nonce;
            // to ensure "signature" is required (not null)
            if (signature == null)
            {
                throw new ArgumentNullException("signature is a required property for TransferModel and cannot be null");
            }
            this.Signature = signature;
        }

        /// <summary>
        /// The unique identifier of the transfer sender vault.
        /// </summary>
        /// <value>The unique identifier of the transfer sender vault.</value>
        [DataMember(Name = "senderVaultId", IsRequired = true, EmitDefaultValue = true)]
        public Guid SenderVaultId { get; set; }

        /// <summary>
        /// The unique identifier of the transfer recipient vault.
        /// </summary>
        /// <value>The unique identifier of the transfer recipient vault.</value>
        [DataMember(Name = "receiverVaultId", IsRequired = true, EmitDefaultValue = true)]
        public Guid ReceiverVaultId { get; set; }

        /// <summary>
        /// The amount of the asset to be transferred, in quantized form.
        /// </summary>
        /// <value>The amount of the asset to be transferred, in quantized form.</value>
        [DataMember(Name = "quantizedAmount", IsRequired = true, EmitDefaultValue = true)]
        public string QuantizedAmount { get; set; }

        /// <summary>
        /// The timestamp at which this transfer becomes invalid, in seconds since the Unix epoch.
        /// </summary>
        /// <value>The timestamp at which this transfer becomes invalid, in seconds since the Unix epoch.</value>
        [DataMember(Name = "expirationTimestamp", IsRequired = true, EmitDefaultValue = true)]
        public long ExpirationTimestamp { get; set; }

        /// <summary>
        /// The unique nonce for the transfer.
        /// </summary>
        /// <value>The unique nonce for the transfer.</value>
        [DataMember(Name = "nonce", IsRequired = true, EmitDefaultValue = true)]
        public int Nonce { get; set; }

        /// <summary>
        /// Gets or Sets Signature
        /// </summary>
        [DataMember(Name = "signature", IsRequired = true, EmitDefaultValue = true)]
        public SignatureModel Signature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransferModel {\n");
            sb.Append("  SenderVaultId: ").Append(SenderVaultId).Append("\n");
            sb.Append("  ReceiverVaultId: ").Append(ReceiverVaultId).Append("\n");
            sb.Append("  QuantizedAmount: ").Append(QuantizedAmount).Append("\n");
            sb.Append("  ExpirationTimestamp: ").Append(ExpirationTimestamp).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransferModel);
        }

        /// <summary>
        /// Returns true if TransferModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TransferModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransferModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SenderVaultId == input.SenderVaultId ||
                    (this.SenderVaultId != null &&
                    this.SenderVaultId.Equals(input.SenderVaultId))
                ) && 
                (
                    this.ReceiverVaultId == input.ReceiverVaultId ||
                    (this.ReceiverVaultId != null &&
                    this.ReceiverVaultId.Equals(input.ReceiverVaultId))
                ) && 
                (
                    this.QuantizedAmount == input.QuantizedAmount ||
                    (this.QuantizedAmount != null &&
                    this.QuantizedAmount.Equals(input.QuantizedAmount))
                ) && 
                (
                    this.ExpirationTimestamp == input.ExpirationTimestamp ||
                    this.ExpirationTimestamp.Equals(input.ExpirationTimestamp)
                ) && 
                (
                    this.Nonce == input.Nonce ||
                    this.Nonce.Equals(input.Nonce)
                ) && 
                (
                    this.Signature == input.Signature ||
                    (this.Signature != null &&
                    this.Signature.Equals(input.Signature))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SenderVaultId != null)
                {
                    hashCode = (hashCode * 59) + this.SenderVaultId.GetHashCode();
                }
                if (this.ReceiverVaultId != null)
                {
                    hashCode = (hashCode * 59) + this.ReceiverVaultId.GetHashCode();
                }
                if (this.QuantizedAmount != null)
                {
                    hashCode = (hashCode * 59) + this.QuantizedAmount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExpirationTimestamp.GetHashCode();
                hashCode = (hashCode * 59) + this.Nonce.GetHashCode();
                if (this.Signature != null)
                {
                    hashCode = (hashCode * 59) + this.Signature.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Nonce (int) maximum
            if (this.Nonce > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Nonce, must be a value less than or equal to 2147483647.", new [] { "Nonce" });
            }

            // Nonce (int) minimum
            if (this.Nonce < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Nonce, must be a value greater than or equal to 0.", new [] { "Nonce" });
            }

            yield break;
        }
    }

}
