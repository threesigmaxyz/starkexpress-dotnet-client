/*
 * Arc API Docs
 *
 * An API for the Arc platform.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = StarkExpress.SDK.Client.Client.FileParameter;
using OpenAPIDateConverter = StarkExpress.SDK.Client.Client.OpenAPIDateConverter;

namespace StarkExpress.SDK.Client.Model
{
    /// <summary>
    /// OrderbookDto
    /// </summary>
    [DataContract(Name = "OrderbookDto")]
    public partial class OrderbookDto : IEquatable<OrderbookDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderbookDto" /> class.
        /// </summary>
        /// <param name="orderbookId">The ID of the orderbook..</param>
        /// <param name="symbol">The orderbook symbol..</param>
        /// <param name="baseAsset">baseAsset.</param>
        /// <param name="quoteAsset">quoteAsset.</param>
        public OrderbookDto(Guid orderbookId = default(Guid), string symbol = default(string), OrderbookAssetDto baseAsset = default(OrderbookAssetDto), OrderbookAssetDto quoteAsset = default(OrderbookAssetDto))
        {
            this.OrderbookId = orderbookId;
            this.Symbol = symbol;
            this.BaseAsset = baseAsset;
            this.QuoteAsset = quoteAsset;
        }

        /// <summary>
        /// The ID of the orderbook.
        /// </summary>
        /// <value>The ID of the orderbook.</value>
        [DataMember(Name = "orderbookId", EmitDefaultValue = false)]
        public Guid OrderbookId { get; set; }

        /// <summary>
        /// The orderbook symbol.
        /// </summary>
        /// <value>The orderbook symbol.</value>
        [DataMember(Name = "symbol", EmitDefaultValue = true)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets BaseAsset
        /// </summary>
        [DataMember(Name = "baseAsset", EmitDefaultValue = false)]
        public OrderbookAssetDto BaseAsset { get; set; }

        /// <summary>
        /// Gets or Sets QuoteAsset
        /// </summary>
        [DataMember(Name = "quoteAsset", EmitDefaultValue = false)]
        public OrderbookAssetDto QuoteAsset { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderbookDto {\n");
            sb.Append("  OrderbookId: ").Append(OrderbookId).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  BaseAsset: ").Append(BaseAsset).Append("\n");
            sb.Append("  QuoteAsset: ").Append(QuoteAsset).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderbookDto);
        }

        /// <summary>
        /// Returns true if OrderbookDto instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderbookDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderbookDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OrderbookId == input.OrderbookId ||
                    (this.OrderbookId != null &&
                    this.OrderbookId.Equals(input.OrderbookId))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.BaseAsset == input.BaseAsset ||
                    (this.BaseAsset != null &&
                    this.BaseAsset.Equals(input.BaseAsset))
                ) && 
                (
                    this.QuoteAsset == input.QuoteAsset ||
                    (this.QuoteAsset != null &&
                    this.QuoteAsset.Equals(input.QuoteAsset))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderbookId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderbookId.GetHashCode();
                }
                if (this.Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                }
                if (this.BaseAsset != null)
                {
                    hashCode = (hashCode * 59) + this.BaseAsset.GetHashCode();
                }
                if (this.QuoteAsset != null)
                {
                    hashCode = (hashCode * 59) + this.QuoteAsset.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
