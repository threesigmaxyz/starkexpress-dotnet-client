/*
 * StarkExpress API Docs
 *
 * An API for the StarkExpress platform.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StarkExpress.SDK.Client.Client.OpenAPIDateConverter;

namespace StarkExpress.SDK.Client.Model
{
    /// <summary>
    /// Request model to mint a batch of assets.
    /// </summary>
    [DataContract(Name = "MintRequestDataModel")]
    public partial class MintRequestDataModel : IEquatable<MintRequestDataModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MintRequestDataModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MintRequestDataModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MintRequestDataModel" /> class.
        /// </summary>
        /// <param name="userId">The ID of the user for which the assets should be minted. (required).</param>
        /// <param name="mints">The array of assets to mint for the user. (required).</param>
        public MintRequestDataModel(Guid userId = default(Guid), List<MintDataModel> mints = default(List<MintDataModel>))
        {
            this.UserId = userId;
            // to ensure "mints" is required (not null)
            if (mints == null)
            {
                throw new ArgumentNullException("mints is a required property for MintRequestDataModel and cannot be null");
            }
            this.Mints = mints;
        }

        /// <summary>
        /// The ID of the user for which the assets should be minted.
        /// </summary>
        /// <value>The ID of the user for which the assets should be minted.</value>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public Guid UserId { get; set; }

        /// <summary>
        /// The array of assets to mint for the user.
        /// </summary>
        /// <value>The array of assets to mint for the user.</value>
        [DataMember(Name = "mints", IsRequired = true, EmitDefaultValue = true)]
        public List<MintDataModel> Mints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MintRequestDataModel {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Mints: ").Append(Mints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MintRequestDataModel);
        }

        /// <summary>
        /// Returns true if MintRequestDataModel instances are equal
        /// </summary>
        /// <param name="input">Instance of MintRequestDataModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MintRequestDataModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Mints == input.Mints ||
                    this.Mints != null &&
                    input.Mints != null &&
                    this.Mints.SequenceEqual(input.Mints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                if (this.Mints != null)
                {
                    hashCode = (hashCode * 59) + this.Mints.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
