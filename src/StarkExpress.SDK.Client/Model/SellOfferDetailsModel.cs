/*
 * Arc API Docs
 *
 * An API for the Arc platform.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = StarkExpress.SDK.Client.Client.FileParameter;
using OpenAPIDateConverter = StarkExpress.SDK.Client.Client.OpenAPIDateConverter;

namespace StarkExpress.SDK.Client.Model
{
    /// <summary>
    /// SellOfferDetailsModel
    /// </summary>
    [DataContract(Name = "SellOfferDetailsModel")]
    public partial class SellOfferDetailsModel : IEquatable<SellOfferDetailsModel>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DataAvailabilityMode
        /// </summary>
        [DataMember(Name = "dataAvailabilityMode", IsRequired = true, EmitDefaultValue = true)]
        public DataAvailabilityModes DataAvailabilityMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SellOfferDetailsModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SellOfferDetailsModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SellOfferDetailsModel" /> class.
        /// </summary>
        /// <param name="sellerId">The unique identifier of the user who is placing the sell offer. (required).</param>
        /// <param name="assetId">The unique identifier of the asset that is being sold. (required).</param>
        /// <param name="quantity">The quantity of the product that is being sold. (required).</param>
        /// <param name="tokenId">The hexadecimal string representation of the token ID, if applicable (ie. ERC-721/ERC-1155)..</param>
        /// <param name="mintingBlob">The hexadecimal string representation of the minting blob, if applicable (ie. Mintable ERC-20/ERC-721/ERC-1155)..</param>
        /// <param name="currencyId">The unique identifier of the asset that is being used as currency. (required).</param>
        /// <param name="dataAvailabilityMode">dataAvailabilityMode (required).</param>
        /// <param name="price">The price of the asset that is being sold. (required).</param>
        public SellOfferDetailsModel(Guid sellerId = default(Guid), Guid assetId = default(Guid), string quantity = default(string), string tokenId = default(string), string mintingBlob = default(string), Guid currencyId = default(Guid), DataAvailabilityModes dataAvailabilityMode = default(DataAvailabilityModes), string price = default(string))
        {
            this.SellerId = sellerId;
            this.AssetId = assetId;
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new ArgumentNullException("quantity is a required property for SellOfferDetailsModel and cannot be null");
            }
            this.Quantity = quantity;
            this.CurrencyId = currencyId;
            this.DataAvailabilityMode = dataAvailabilityMode;
            // to ensure "price" is required (not null)
            if (price == null)
            {
                throw new ArgumentNullException("price is a required property for SellOfferDetailsModel and cannot be null");
            }
            this.Price = price;
            this.TokenId = tokenId;
            this.MintingBlob = mintingBlob;
        }

        /// <summary>
        /// The unique identifier of the user who is placing the sell offer.
        /// </summary>
        /// <value>The unique identifier of the user who is placing the sell offer.</value>
        [DataMember(Name = "sellerId", IsRequired = true, EmitDefaultValue = true)]
        public Guid SellerId { get; set; }

        /// <summary>
        /// The unique identifier of the asset that is being sold.
        /// </summary>
        /// <value>The unique identifier of the asset that is being sold.</value>
        [DataMember(Name = "assetId", IsRequired = true, EmitDefaultValue = true)]
        public Guid AssetId { get; set; }

        /// <summary>
        /// The quantity of the product that is being sold.
        /// </summary>
        /// <value>The quantity of the product that is being sold.</value>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = true)]
        public string Quantity { get; set; }

        /// <summary>
        /// The hexadecimal string representation of the token ID, if applicable (ie. ERC-721/ERC-1155).
        /// </summary>
        /// <value>The hexadecimal string representation of the token ID, if applicable (ie. ERC-721/ERC-1155).</value>
        [DataMember(Name = "tokenId", EmitDefaultValue = true)]
        public string TokenId { get; set; }

        /// <summary>
        /// The hexadecimal string representation of the minting blob, if applicable (ie. Mintable ERC-20/ERC-721/ERC-1155).
        /// </summary>
        /// <value>The hexadecimal string representation of the minting blob, if applicable (ie. Mintable ERC-20/ERC-721/ERC-1155).</value>
        [DataMember(Name = "mintingBlob", EmitDefaultValue = true)]
        public string MintingBlob { get; set; }

        /// <summary>
        /// The unique identifier of the asset that is being used as currency.
        /// </summary>
        /// <value>The unique identifier of the asset that is being used as currency.</value>
        [DataMember(Name = "currencyId", IsRequired = true, EmitDefaultValue = true)]
        public Guid CurrencyId { get; set; }

        /// <summary>
        /// The price of the asset that is being sold.
        /// </summary>
        /// <value>The price of the asset that is being sold.</value>
        [DataMember(Name = "price", IsRequired = true, EmitDefaultValue = true)]
        public string Price { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SellOfferDetailsModel {\n");
            sb.Append("  SellerId: ").Append(SellerId).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("  MintingBlob: ").Append(MintingBlob).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  DataAvailabilityMode: ").Append(DataAvailabilityMode).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SellOfferDetailsModel);
        }

        /// <summary>
        /// Returns true if SellOfferDetailsModel instances are equal
        /// </summary>
        /// <param name="input">Instance of SellOfferDetailsModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SellOfferDetailsModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SellerId == input.SellerId ||
                    (this.SellerId != null &&
                    this.SellerId.Equals(input.SellerId))
                ) && 
                (
                    this.AssetId == input.AssetId ||
                    (this.AssetId != null &&
                    this.AssetId.Equals(input.AssetId))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.TokenId == input.TokenId ||
                    (this.TokenId != null &&
                    this.TokenId.Equals(input.TokenId))
                ) && 
                (
                    this.MintingBlob == input.MintingBlob ||
                    (this.MintingBlob != null &&
                    this.MintingBlob.Equals(input.MintingBlob))
                ) && 
                (
                    this.CurrencyId == input.CurrencyId ||
                    (this.CurrencyId != null &&
                    this.CurrencyId.Equals(input.CurrencyId))
                ) && 
                (
                    this.DataAvailabilityMode == input.DataAvailabilityMode ||
                    this.DataAvailabilityMode.Equals(input.DataAvailabilityMode)
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SellerId != null)
                {
                    hashCode = (hashCode * 59) + this.SellerId.GetHashCode();
                }
                if (this.AssetId != null)
                {
                    hashCode = (hashCode * 59) + this.AssetId.GetHashCode();
                }
                if (this.Quantity != null)
                {
                    hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                }
                if (this.TokenId != null)
                {
                    hashCode = (hashCode * 59) + this.TokenId.GetHashCode();
                }
                if (this.MintingBlob != null)
                {
                    hashCode = (hashCode * 59) + this.MintingBlob.GetHashCode();
                }
                if (this.CurrencyId != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DataAvailabilityMode.GetHashCode();
                if (this.Price != null)
                {
                    hashCode = (hashCode * 59) + this.Price.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
