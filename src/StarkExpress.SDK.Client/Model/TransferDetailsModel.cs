/*
 * Arc API Docs
 *
 * An API for the Arc platform.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = StarkExpress.SDK.Client.Client.FileParameter;
using OpenAPIDateConverter = StarkExpress.SDK.Client.Client.OpenAPIDateConverter;

namespace StarkExpress.SDK.Client.Model
{
    /// <summary>
    /// Request model to fetch details for a signable transfer.
    /// </summary>
    [DataContract(Name = "TransferDetailsModel")]
    public partial class TransferDetailsModel : IEquatable<TransferDetailsModel>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets SenderDataAvailabilityMode
        /// </summary>
        [DataMember(Name = "senderDataAvailabilityMode", IsRequired = true, EmitDefaultValue = true)]
        public DataAvailabilityModes SenderDataAvailabilityMode { get; set; }

        /// <summary>
        /// Gets or Sets ReceiverDataAvailabilityMode
        /// </summary>
        [DataMember(Name = "receiverDataAvailabilityMode", IsRequired = true, EmitDefaultValue = true)]
        public DataAvailabilityModes ReceiverDataAvailabilityMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferDetailsModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransferDetailsModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferDetailsModel" /> class.
        /// </summary>
        /// <param name="senderUserId">The unique identifier of the user sending the transfer. (required).</param>
        /// <param name="receiverUserId">The unique identifier of the user receiving the transfer. (required).</param>
        /// <param name="assetId">The unique identifier of the asset being transferred. (required).</param>
        /// <param name="tokenId">The hexadecimal string representation of the token ID, if applicable (ie. ERC-721/ERC-1155)..</param>
        /// <param name="mintingBlob">The hexadecimal string representation of the minting blob, if applicable (ie. Mintable ERC-20/ERC-721/ERC-1155)..</param>
        /// <param name="senderDataAvailabilityMode">senderDataAvailabilityMode (required).</param>
        /// <param name="receiverDataAvailabilityMode">receiverDataAvailabilityMode (required).</param>
        /// <param name="amount">The amount of the asset to be transferred. (required).</param>
        public TransferDetailsModel(Guid senderUserId = default(Guid), Guid receiverUserId = default(Guid), Guid assetId = default(Guid), string tokenId = default(string), string mintingBlob = default(string), DataAvailabilityModes senderDataAvailabilityMode = default(DataAvailabilityModes), DataAvailabilityModes receiverDataAvailabilityMode = default(DataAvailabilityModes), string amount = default(string))
        {
            this.SenderUserId = senderUserId;
            this.ReceiverUserId = receiverUserId;
            this.AssetId = assetId;
            this.SenderDataAvailabilityMode = senderDataAvailabilityMode;
            this.ReceiverDataAvailabilityMode = receiverDataAvailabilityMode;
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for TransferDetailsModel and cannot be null");
            }
            this.Amount = amount;
            this.TokenId = tokenId;
            this.MintingBlob = mintingBlob;
        }

        /// <summary>
        /// The unique identifier of the user sending the transfer.
        /// </summary>
        /// <value>The unique identifier of the user sending the transfer.</value>
        [DataMember(Name = "senderUserId", IsRequired = true, EmitDefaultValue = true)]
        public Guid SenderUserId { get; set; }

        /// <summary>
        /// The unique identifier of the user receiving the transfer.
        /// </summary>
        /// <value>The unique identifier of the user receiving the transfer.</value>
        [DataMember(Name = "receiverUserId", IsRequired = true, EmitDefaultValue = true)]
        public Guid ReceiverUserId { get; set; }

        /// <summary>
        /// The unique identifier of the asset being transferred.
        /// </summary>
        /// <value>The unique identifier of the asset being transferred.</value>
        [DataMember(Name = "assetId", IsRequired = true, EmitDefaultValue = true)]
        public Guid AssetId { get; set; }

        /// <summary>
        /// The hexadecimal string representation of the token ID, if applicable (ie. ERC-721/ERC-1155).
        /// </summary>
        /// <value>The hexadecimal string representation of the token ID, if applicable (ie. ERC-721/ERC-1155).</value>
        [DataMember(Name = "tokenId", EmitDefaultValue = true)]
        public string TokenId { get; set; }

        /// <summary>
        /// The hexadecimal string representation of the minting blob, if applicable (ie. Mintable ERC-20/ERC-721/ERC-1155).
        /// </summary>
        /// <value>The hexadecimal string representation of the minting blob, if applicable (ie. Mintable ERC-20/ERC-721/ERC-1155).</value>
        [DataMember(Name = "mintingBlob", EmitDefaultValue = true)]
        public string MintingBlob { get; set; }

        /// <summary>
        /// The amount of the asset to be transferred.
        /// </summary>
        /// <value>The amount of the asset to be transferred.</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public string Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransferDetailsModel {\n");
            sb.Append("  SenderUserId: ").Append(SenderUserId).Append("\n");
            sb.Append("  ReceiverUserId: ").Append(ReceiverUserId).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("  MintingBlob: ").Append(MintingBlob).Append("\n");
            sb.Append("  SenderDataAvailabilityMode: ").Append(SenderDataAvailabilityMode).Append("\n");
            sb.Append("  ReceiverDataAvailabilityMode: ").Append(ReceiverDataAvailabilityMode).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransferDetailsModel);
        }

        /// <summary>
        /// Returns true if TransferDetailsModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TransferDetailsModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransferDetailsModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SenderUserId == input.SenderUserId ||
                    (this.SenderUserId != null &&
                    this.SenderUserId.Equals(input.SenderUserId))
                ) && 
                (
                    this.ReceiverUserId == input.ReceiverUserId ||
                    (this.ReceiverUserId != null &&
                    this.ReceiverUserId.Equals(input.ReceiverUserId))
                ) && 
                (
                    this.AssetId == input.AssetId ||
                    (this.AssetId != null &&
                    this.AssetId.Equals(input.AssetId))
                ) && 
                (
                    this.TokenId == input.TokenId ||
                    (this.TokenId != null &&
                    this.TokenId.Equals(input.TokenId))
                ) && 
                (
                    this.MintingBlob == input.MintingBlob ||
                    (this.MintingBlob != null &&
                    this.MintingBlob.Equals(input.MintingBlob))
                ) && 
                (
                    this.SenderDataAvailabilityMode == input.SenderDataAvailabilityMode ||
                    this.SenderDataAvailabilityMode.Equals(input.SenderDataAvailabilityMode)
                ) && 
                (
                    this.ReceiverDataAvailabilityMode == input.ReceiverDataAvailabilityMode ||
                    this.ReceiverDataAvailabilityMode.Equals(input.ReceiverDataAvailabilityMode)
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SenderUserId != null)
                {
                    hashCode = (hashCode * 59) + this.SenderUserId.GetHashCode();
                }
                if (this.ReceiverUserId != null)
                {
                    hashCode = (hashCode * 59) + this.ReceiverUserId.GetHashCode();
                }
                if (this.AssetId != null)
                {
                    hashCode = (hashCode * 59) + this.AssetId.GetHashCode();
                }
                if (this.TokenId != null)
                {
                    hashCode = (hashCode * 59) + this.TokenId.GetHashCode();
                }
                if (this.MintingBlob != null)
                {
                    hashCode = (hashCode * 59) + this.MintingBlob.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SenderDataAvailabilityMode.GetHashCode();
                hashCode = (hashCode * 59) + this.ReceiverDataAvailabilityMode.GetHashCode();
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
