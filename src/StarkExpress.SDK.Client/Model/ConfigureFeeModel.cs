/*
 * StarkExpress API Docs
 *
 * An API for the StarkExpress platform.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StarkExpress.SDK.Client.Client.OpenAPIDateConverter;

namespace StarkExpress.SDK.Client.Model
{
    /// <summary>
    /// Request model to configure the fee model for an operation.
    /// </summary>
    [DataContract(Name = "ConfigureFeeModel")]
    public partial class ConfigureFeeModel : IEquatable<ConfigureFeeModel>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets FeeAction
        /// </summary>
        [DataMember(Name = "feeAction", IsRequired = true, EmitDefaultValue = true)]
        public FeeAction FeeAction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigureFeeModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConfigureFeeModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigureFeeModel" /> class.
        /// </summary>
        /// <param name="feeAction">feeAction (required).</param>
        /// <param name="basisPoints">The basis points (1/100 of a percent) of the fee to take on the operation. (required).</param>
        public ConfigureFeeModel(FeeAction feeAction = default(FeeAction), int basisPoints = default(int))
        {
            this.FeeAction = feeAction;
            this.BasisPoints = basisPoints;
        }

        /// <summary>
        /// The basis points (1/100 of a percent) of the fee to take on the operation.
        /// </summary>
        /// <value>The basis points (1/100 of a percent) of the fee to take on the operation.</value>
        [DataMember(Name = "basisPoints", IsRequired = true, EmitDefaultValue = true)]
        public int BasisPoints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConfigureFeeModel {\n");
            sb.Append("  FeeAction: ").Append(FeeAction).Append("\n");
            sb.Append("  BasisPoints: ").Append(BasisPoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConfigureFeeModel);
        }

        /// <summary>
        /// Returns true if ConfigureFeeModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ConfigureFeeModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConfigureFeeModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FeeAction == input.FeeAction ||
                    this.FeeAction.Equals(input.FeeAction)
                ) && 
                (
                    this.BasisPoints == input.BasisPoints ||
                    this.BasisPoints.Equals(input.BasisPoints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.FeeAction.GetHashCode();
                hashCode = (hashCode * 59) + this.BasisPoints.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // BasisPoints (int) maximum
            if (this.BasisPoints > (int)10000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BasisPoints, must be a value less than or equal to 10000.", new [] { "BasisPoints" });
            }

            // BasisPoints (int) minimum
            if (this.BasisPoints < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BasisPoints, must be a value greater than or equal to 0.", new [] { "BasisPoints" });
            }

            yield break;
        }
    }

}
