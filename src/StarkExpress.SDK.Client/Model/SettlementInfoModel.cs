/*
 * StarkExpress API Docs
 *
 * An API for the StarkExpress platform.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StarkExpress.SDK.Client.Client.OpenAPIDateConverter;

namespace StarkExpress.SDK.Client.Model
{
    /// <summary>
    /// Settlement details model.
    /// </summary>
    [DataContract(Name = "SettlementInfoModel")]
    public partial class SettlementInfoModel : IEquatable<SettlementInfoModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SettlementInfoModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SettlementInfoModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SettlementInfoModel" /> class.
        /// </summary>
        /// <param name="makerAmount">The settlement maker amount. (required).</param>
        /// <param name="takerAmount">The settlement maker amount. (required).</param>
        /// <param name="makerFeeAmount">The settlement maker fee amount. (required).</param>
        /// <param name="takerFeeAmount">The settlement taker fee amount. (required).</param>
        public SettlementInfoModel(string makerAmount = default(string), string takerAmount = default(string), string makerFeeAmount = default(string), string takerFeeAmount = default(string))
        {
            // to ensure "makerAmount" is required (not null)
            if (makerAmount == null)
            {
                throw new ArgumentNullException("makerAmount is a required property for SettlementInfoModel and cannot be null");
            }
            this.MakerAmount = makerAmount;
            // to ensure "takerAmount" is required (not null)
            if (takerAmount == null)
            {
                throw new ArgumentNullException("takerAmount is a required property for SettlementInfoModel and cannot be null");
            }
            this.TakerAmount = takerAmount;
            // to ensure "makerFeeAmount" is required (not null)
            if (makerFeeAmount == null)
            {
                throw new ArgumentNullException("makerFeeAmount is a required property for SettlementInfoModel and cannot be null");
            }
            this.MakerFeeAmount = makerFeeAmount;
            // to ensure "takerFeeAmount" is required (not null)
            if (takerFeeAmount == null)
            {
                throw new ArgumentNullException("takerFeeAmount is a required property for SettlementInfoModel and cannot be null");
            }
            this.TakerFeeAmount = takerFeeAmount;
        }

        /// <summary>
        /// The settlement maker amount.
        /// </summary>
        /// <value>The settlement maker amount.</value>
        [DataMember(Name = "makerAmount", IsRequired = true, EmitDefaultValue = true)]
        public string MakerAmount { get; set; }

        /// <summary>
        /// The settlement maker amount.
        /// </summary>
        /// <value>The settlement maker amount.</value>
        [DataMember(Name = "takerAmount", IsRequired = true, EmitDefaultValue = true)]
        public string TakerAmount { get; set; }

        /// <summary>
        /// The settlement maker fee amount.
        /// </summary>
        /// <value>The settlement maker fee amount.</value>
        [DataMember(Name = "makerFeeAmount", IsRequired = true, EmitDefaultValue = true)]
        public string MakerFeeAmount { get; set; }

        /// <summary>
        /// The settlement taker fee amount.
        /// </summary>
        /// <value>The settlement taker fee amount.</value>
        [DataMember(Name = "takerFeeAmount", IsRequired = true, EmitDefaultValue = true)]
        public string TakerFeeAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SettlementInfoModel {\n");
            sb.Append("  MakerAmount: ").Append(MakerAmount).Append("\n");
            sb.Append("  TakerAmount: ").Append(TakerAmount).Append("\n");
            sb.Append("  MakerFeeAmount: ").Append(MakerFeeAmount).Append("\n");
            sb.Append("  TakerFeeAmount: ").Append(TakerFeeAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SettlementInfoModel);
        }

        /// <summary>
        /// Returns true if SettlementInfoModel instances are equal
        /// </summary>
        /// <param name="input">Instance of SettlementInfoModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SettlementInfoModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MakerAmount == input.MakerAmount ||
                    (this.MakerAmount != null &&
                    this.MakerAmount.Equals(input.MakerAmount))
                ) && 
                (
                    this.TakerAmount == input.TakerAmount ||
                    (this.TakerAmount != null &&
                    this.TakerAmount.Equals(input.TakerAmount))
                ) && 
                (
                    this.MakerFeeAmount == input.MakerFeeAmount ||
                    (this.MakerFeeAmount != null &&
                    this.MakerFeeAmount.Equals(input.MakerFeeAmount))
                ) && 
                (
                    this.TakerFeeAmount == input.TakerFeeAmount ||
                    (this.TakerFeeAmount != null &&
                    this.TakerFeeAmount.Equals(input.TakerFeeAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MakerAmount != null)
                {
                    hashCode = (hashCode * 59) + this.MakerAmount.GetHashCode();
                }
                if (this.TakerAmount != null)
                {
                    hashCode = (hashCode * 59) + this.TakerAmount.GetHashCode();
                }
                if (this.MakerFeeAmount != null)
                {
                    hashCode = (hashCode * 59) + this.MakerFeeAmount.GetHashCode();
                }
                if (this.TakerFeeAmount != null)
                {
                    hashCode = (hashCode * 59) + this.TakerFeeAmount.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
