/*
 * Arc API Docs
 *
 * An API for the Arc platform.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = StarkExpress.SDK.Client.Client.FileParameter;
using OpenAPIDateConverter = StarkExpress.SDK.Client.Client.OpenAPIDateConverter;

namespace StarkExpress.SDK.Client.Model
{
    /// <summary>
    /// RegisterBuyOrderModel
    /// </summary>
    [DataContract(Name = "RegisterBuyOrderModel")]
    public partial class RegisterBuyOrderModel : IEquatable<RegisterBuyOrderModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterBuyOrderModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RegisterBuyOrderModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterBuyOrderModel" /> class.
        /// </summary>
        /// <param name="offerId">The unique identifier of the marketplace offer. (required).</param>
        /// <param name="buyerId">The unique identifier of the user who is placing the buy order. (required).</param>
        /// <param name="productVaultId">The unique identifier of the product vault. (required).</param>
        /// <param name="currencyVaultId">The unique identifier of the currency vault. (required).</param>
        /// <param name="expirationTimestamp">The timestamp at which this transfer becomes invalid, in seconds since the Unix epoch. (required).</param>
        /// <param name="nonce">The unique nonce for the settlement. (required).</param>
        /// <param name="signature">signature (required).</param>
        public RegisterBuyOrderModel(Guid offerId = default(Guid), Guid buyerId = default(Guid), Guid productVaultId = default(Guid), Guid currencyVaultId = default(Guid), long expirationTimestamp = default(long), int nonce = default(int), SignatureModel signature = default(SignatureModel))
        {
            this.OfferId = offerId;
            this.BuyerId = buyerId;
            this.ProductVaultId = productVaultId;
            this.CurrencyVaultId = currencyVaultId;
            this.ExpirationTimestamp = expirationTimestamp;
            this.Nonce = nonce;
            // to ensure "signature" is required (not null)
            if (signature == null)
            {
                throw new ArgumentNullException("signature is a required property for RegisterBuyOrderModel and cannot be null");
            }
            this.Signature = signature;
        }

        /// <summary>
        /// The unique identifier of the marketplace offer.
        /// </summary>
        /// <value>The unique identifier of the marketplace offer.</value>
        [DataMember(Name = "offerId", IsRequired = true, EmitDefaultValue = true)]
        public Guid OfferId { get; set; }

        /// <summary>
        /// The unique identifier of the user who is placing the buy order.
        /// </summary>
        /// <value>The unique identifier of the user who is placing the buy order.</value>
        [DataMember(Name = "buyerId", IsRequired = true, EmitDefaultValue = true)]
        public Guid BuyerId { get; set; }

        /// <summary>
        /// The unique identifier of the product vault.
        /// </summary>
        /// <value>The unique identifier of the product vault.</value>
        [DataMember(Name = "productVaultId", IsRequired = true, EmitDefaultValue = true)]
        public Guid ProductVaultId { get; set; }

        /// <summary>
        /// The unique identifier of the currency vault.
        /// </summary>
        /// <value>The unique identifier of the currency vault.</value>
        [DataMember(Name = "currencyVaultId", IsRequired = true, EmitDefaultValue = true)]
        public Guid CurrencyVaultId { get; set; }

        /// <summary>
        /// The timestamp at which this transfer becomes invalid, in seconds since the Unix epoch.
        /// </summary>
        /// <value>The timestamp at which this transfer becomes invalid, in seconds since the Unix epoch.</value>
        [DataMember(Name = "expirationTimestamp", IsRequired = true, EmitDefaultValue = true)]
        public long ExpirationTimestamp { get; set; }

        /// <summary>
        /// The unique nonce for the settlement.
        /// </summary>
        /// <value>The unique nonce for the settlement.</value>
        [DataMember(Name = "nonce", IsRequired = true, EmitDefaultValue = true)]
        public int Nonce { get; set; }

        /// <summary>
        /// Gets or Sets Signature
        /// </summary>
        [DataMember(Name = "signature", IsRequired = true, EmitDefaultValue = true)]
        public SignatureModel Signature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RegisterBuyOrderModel {\n");
            sb.Append("  OfferId: ").Append(OfferId).Append("\n");
            sb.Append("  BuyerId: ").Append(BuyerId).Append("\n");
            sb.Append("  ProductVaultId: ").Append(ProductVaultId).Append("\n");
            sb.Append("  CurrencyVaultId: ").Append(CurrencyVaultId).Append("\n");
            sb.Append("  ExpirationTimestamp: ").Append(ExpirationTimestamp).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegisterBuyOrderModel);
        }

        /// <summary>
        /// Returns true if RegisterBuyOrderModel instances are equal
        /// </summary>
        /// <param name="input">Instance of RegisterBuyOrderModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegisterBuyOrderModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OfferId == input.OfferId ||
                    (this.OfferId != null &&
                    this.OfferId.Equals(input.OfferId))
                ) && 
                (
                    this.BuyerId == input.BuyerId ||
                    (this.BuyerId != null &&
                    this.BuyerId.Equals(input.BuyerId))
                ) && 
                (
                    this.ProductVaultId == input.ProductVaultId ||
                    (this.ProductVaultId != null &&
                    this.ProductVaultId.Equals(input.ProductVaultId))
                ) && 
                (
                    this.CurrencyVaultId == input.CurrencyVaultId ||
                    (this.CurrencyVaultId != null &&
                    this.CurrencyVaultId.Equals(input.CurrencyVaultId))
                ) && 
                (
                    this.ExpirationTimestamp == input.ExpirationTimestamp ||
                    this.ExpirationTimestamp.Equals(input.ExpirationTimestamp)
                ) && 
                (
                    this.Nonce == input.Nonce ||
                    this.Nonce.Equals(input.Nonce)
                ) && 
                (
                    this.Signature == input.Signature ||
                    (this.Signature != null &&
                    this.Signature.Equals(input.Signature))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OfferId != null)
                {
                    hashCode = (hashCode * 59) + this.OfferId.GetHashCode();
                }
                if (this.BuyerId != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerId.GetHashCode();
                }
                if (this.ProductVaultId != null)
                {
                    hashCode = (hashCode * 59) + this.ProductVaultId.GetHashCode();
                }
                if (this.CurrencyVaultId != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyVaultId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExpirationTimestamp.GetHashCode();
                hashCode = (hashCode * 59) + this.Nonce.GetHashCode();
                if (this.Signature != null)
                {
                    hashCode = (hashCode * 59) + this.Signature.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Nonce (int) maximum
            if (this.Nonce > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Nonce, must be a value less than or equal to 2147483647.", new [] { "Nonce" });
            }

            // Nonce (int) minimum
            if (this.Nonce < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Nonce, must be a value greater than or equal to 0.", new [] { "Nonce" });
            }

            yield break;
        }
    }

}
