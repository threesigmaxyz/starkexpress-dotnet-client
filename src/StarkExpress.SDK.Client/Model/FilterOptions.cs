/*
 * StarkExpress API Docs
 *
 * An API for the StarkExpress platform.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StarkExpress.SDK.Client.Client.OpenAPIDateConverter;

namespace StarkExpress.SDK.Client.Model
{
    /// <summary>
    /// Defines FilterOptions
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum FilterOptions
    {
        /// <summary>
        /// Enum StartsWith for value: StartsWith
        /// </summary>
        [EnumMember(Value = "StartsWith")]
        StartsWith = 1,

        /// <summary>
        /// Enum EndsWith for value: EndsWith
        /// </summary>
        [EnumMember(Value = "EndsWith")]
        EndsWith = 2,

        /// <summary>
        /// Enum Contains for value: Contains
        /// </summary>
        [EnumMember(Value = "Contains")]
        Contains = 3,

        /// <summary>
        /// Enum DoesNotContain for value: DoesNotContain
        /// </summary>
        [EnumMember(Value = "DoesNotContain")]
        DoesNotContain = 4,

        /// <summary>
        /// Enum IsEmpty for value: IsEmpty
        /// </summary>
        [EnumMember(Value = "IsEmpty")]
        IsEmpty = 5,

        /// <summary>
        /// Enum IsNotEmpty for value: IsNotEmpty
        /// </summary>
        [EnumMember(Value = "IsNotEmpty")]
        IsNotEmpty = 6,

        /// <summary>
        /// Enum IsGreaterThan for value: IsGreaterThan
        /// </summary>
        [EnumMember(Value = "IsGreaterThan")]
        IsGreaterThan = 7,

        /// <summary>
        /// Enum IsGreaterThanOrEqualTo for value: IsGreaterThanOrEqualTo
        /// </summary>
        [EnumMember(Value = "IsGreaterThanOrEqualTo")]
        IsGreaterThanOrEqualTo = 8,

        /// <summary>
        /// Enum IsLessThan for value: IsLessThan
        /// </summary>
        [EnumMember(Value = "IsLessThan")]
        IsLessThan = 9,

        /// <summary>
        /// Enum IsLessThanOrEqualTo for value: IsLessThanOrEqualTo
        /// </summary>
        [EnumMember(Value = "IsLessThanOrEqualTo")]
        IsLessThanOrEqualTo = 10,

        /// <summary>
        /// Enum IsEqualTo for value: IsEqualTo
        /// </summary>
        [EnumMember(Value = "IsEqualTo")]
        IsEqualTo = 11,

        /// <summary>
        /// Enum IsNotEqualTo for value: IsNotEqualTo
        /// </summary>
        [EnumMember(Value = "IsNotEqualTo")]
        IsNotEqualTo = 12

    }

}
