/*
 * StarkExpress API Docs
 *
 * An API for the StarkExpress platform.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = StarkExpress.SDK.Client.Client.OpenAPIDateConverter;

namespace StarkExpress.SDK.Client.Model
{
    /// <summary>
    /// OrderbookLevel2DataDto
    /// </summary>
    [DataContract(Name = "OrderbookLevel2DataDto")]
    public partial class OrderbookLevel2DataDto : IEquatable<OrderbookLevel2DataDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderbookLevel2DataDto" /> class.
        /// </summary>
        /// <param name="orderbookId">The ID of the orderbook..</param>
        /// <param name="bids">The orderbook bids..</param>
        /// <param name="asks">The orderbook asks..</param>
        public OrderbookLevel2DataDto(Guid orderbookId = default(Guid), List<OrderbookLevel2EntryDto> bids = default(List<OrderbookLevel2EntryDto>), List<OrderbookLevel2EntryDto> asks = default(List<OrderbookLevel2EntryDto>))
        {
            this.OrderbookId = orderbookId;
            this.Bids = bids;
            this.Asks = asks;
        }

        /// <summary>
        /// The ID of the orderbook.
        /// </summary>
        /// <value>The ID of the orderbook.</value>
        [DataMember(Name = "orderbookId", EmitDefaultValue = false)]
        public Guid OrderbookId { get; set; }

        /// <summary>
        /// The orderbook bids.
        /// </summary>
        /// <value>The orderbook bids.</value>
        [DataMember(Name = "bids", EmitDefaultValue = true)]
        public List<OrderbookLevel2EntryDto> Bids { get; set; }

        /// <summary>
        /// The orderbook asks.
        /// </summary>
        /// <value>The orderbook asks.</value>
        [DataMember(Name = "asks", EmitDefaultValue = true)]
        public List<OrderbookLevel2EntryDto> Asks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderbookLevel2DataDto {\n");
            sb.Append("  OrderbookId: ").Append(OrderbookId).Append("\n");
            sb.Append("  Bids: ").Append(Bids).Append("\n");
            sb.Append("  Asks: ").Append(Asks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderbookLevel2DataDto);
        }

        /// <summary>
        /// Returns true if OrderbookLevel2DataDto instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderbookLevel2DataDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderbookLevel2DataDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OrderbookId == input.OrderbookId ||
                    (this.OrderbookId != null &&
                    this.OrderbookId.Equals(input.OrderbookId))
                ) && 
                (
                    this.Bids == input.Bids ||
                    this.Bids != null &&
                    input.Bids != null &&
                    this.Bids.SequenceEqual(input.Bids)
                ) && 
                (
                    this.Asks == input.Asks ||
                    this.Asks != null &&
                    input.Asks != null &&
                    this.Asks.SequenceEqual(input.Asks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderbookId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderbookId.GetHashCode();
                }
                if (this.Bids != null)
                {
                    hashCode = (hashCode * 59) + this.Bids.GetHashCode();
                }
                if (this.Asks != null)
                {
                    hashCode = (hashCode * 59) + this.Asks.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
