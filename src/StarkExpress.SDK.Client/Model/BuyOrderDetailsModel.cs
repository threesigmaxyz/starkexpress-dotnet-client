/*
 * Arc API Docs
 *
 * An API for the Arc platform.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = StarkExpress.SDK.Client.Client.FileParameter;
using OpenAPIDateConverter = StarkExpress.SDK.Client.Client.OpenAPIDateConverter;

namespace StarkExpress.SDK.Client.Model
{
    /// <summary>
    /// BuyOrderDetailsModel
    /// </summary>
    [DataContract(Name = "BuyOrderDetailsModel")]
    public partial class BuyOrderDetailsModel : IEquatable<BuyOrderDetailsModel>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DataAvailabilityMode
        /// </summary>
        [DataMember(Name = "dataAvailabilityMode", IsRequired = true, EmitDefaultValue = true)]
        public DataAvailabilityModes DataAvailabilityMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuyOrderDetailsModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BuyOrderDetailsModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuyOrderDetailsModel" /> class.
        /// </summary>
        /// <param name="buyerId">The unique identifier of the user who is placing the buy order. (required).</param>
        /// <param name="offerId">The unique identifier of the offer that is being bought. (required).</param>
        /// <param name="dataAvailabilityMode">dataAvailabilityMode (required).</param>
        public BuyOrderDetailsModel(Guid buyerId = default(Guid), Guid offerId = default(Guid), DataAvailabilityModes dataAvailabilityMode = default(DataAvailabilityModes))
        {
            this.BuyerId = buyerId;
            this.OfferId = offerId;
            this.DataAvailabilityMode = dataAvailabilityMode;
        }

        /// <summary>
        /// The unique identifier of the user who is placing the buy order.
        /// </summary>
        /// <value>The unique identifier of the user who is placing the buy order.</value>
        [DataMember(Name = "buyerId", IsRequired = true, EmitDefaultValue = true)]
        public Guid BuyerId { get; set; }

        /// <summary>
        /// The unique identifier of the offer that is being bought.
        /// </summary>
        /// <value>The unique identifier of the offer that is being bought.</value>
        [DataMember(Name = "offerId", IsRequired = true, EmitDefaultValue = true)]
        public Guid OfferId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BuyOrderDetailsModel {\n");
            sb.Append("  BuyerId: ").Append(BuyerId).Append("\n");
            sb.Append("  OfferId: ").Append(OfferId).Append("\n");
            sb.Append("  DataAvailabilityMode: ").Append(DataAvailabilityMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuyOrderDetailsModel);
        }

        /// <summary>
        /// Returns true if BuyOrderDetailsModel instances are equal
        /// </summary>
        /// <param name="input">Instance of BuyOrderDetailsModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuyOrderDetailsModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BuyerId == input.BuyerId ||
                    (this.BuyerId != null &&
                    this.BuyerId.Equals(input.BuyerId))
                ) && 
                (
                    this.OfferId == input.OfferId ||
                    (this.OfferId != null &&
                    this.OfferId.Equals(input.OfferId))
                ) && 
                (
                    this.DataAvailabilityMode == input.DataAvailabilityMode ||
                    this.DataAvailabilityMode.Equals(input.DataAvailabilityMode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BuyerId != null)
                {
                    hashCode = (hashCode * 59) + this.BuyerId.GetHashCode();
                }
                if (this.OfferId != null)
                {
                    hashCode = (hashCode * 59) + this.OfferId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DataAvailabilityMode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
