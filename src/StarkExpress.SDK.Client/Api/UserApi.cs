/*
 * StarkExpress API Docs
 *
 * An API for the StarkExpress platform.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using StarkExpress.SDK.Client.Client;
using StarkExpress.SDK.Client.Client.Auth;
using StarkExpress.SDK.Client.Model;

namespace StarkExpress.SDK.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get EIP712 data to be signed
        /// </summary>
        /// <remarks>
        /// This endpoint return the typed data to be signed with EIP712 that is used on user registration.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="starkKey"></param>
        /// <param name="address"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RegisterDetailsDto</returns>
        RegisterDetailsDto EIP712Details(string username, string starkKey, string address, int operationIndex = 0);

        /// <summary>
        /// Get EIP712 data to be signed
        /// </summary>
        /// <remarks>
        /// This endpoint return the typed data to be signed with EIP712 that is used on user registration.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="starkKey"></param>
        /// <param name="address"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RegisterDetailsDto</returns>
        ApiResponse<RegisterDetailsDto> EIP712DetailsWithHttpInfo(string username, string starkKey, string address, int operationIndex = 0);
        /// <summary>
        /// Get All Users
        /// </summary>
        /// <remarks>
        /// This endpoint fetches all users.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"></param>
        /// <param name="pageSize"></param>
        /// <param name="username"> (optional)</param>
        /// <param name="usernameComparison"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="creationDate"> (optional)</param>
        /// <param name="creationDateComparison"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;UserDto&gt;</returns>
        List<UserDto> GetAllUsers(int pageNumber, int pageSize, string username = default(string), FilterOptions? usernameComparison = default(FilterOptions?), string address = default(string), string creationDate = default(string), FilterOptions? creationDateComparison = default(FilterOptions?), string sortBy = default(string), int operationIndex = 0);

        /// <summary>
        /// Get All Users
        /// </summary>
        /// <remarks>
        /// This endpoint fetches all users.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"></param>
        /// <param name="pageSize"></param>
        /// <param name="username"> (optional)</param>
        /// <param name="usernameComparison"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="creationDate"> (optional)</param>
        /// <param name="creationDateComparison"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;UserDto&gt;</returns>
        ApiResponse<List<UserDto>> GetAllUsersWithHttpInfo(int pageNumber, int pageSize, string username = default(string), FilterOptions? usernameComparison = default(FilterOptions?), string address = default(string), string creationDate = default(string), FilterOptions? creationDateComparison = default(FilterOptions?), string sortBy = default(string), int operationIndex = 0);
        /// <summary>
        /// Get User
        /// </summary>
        /// <remarks>
        /// This endpoint fetches a specific user by ID.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserWithVaultsDto</returns>
        UserWithVaultsDto GetUser(Guid userId, int operationIndex = 0);

        /// <summary>
        /// Get User
        /// </summary>
        /// <remarks>
        /// This endpoint fetches a specific user by ID.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserWithVaultsDto</returns>
        ApiResponse<UserWithVaultsDto> GetUserWithHttpInfo(Guid userId, int operationIndex = 0);
        /// <summary>
        /// Register new User
        /// </summary>
        /// <remarks>
        /// This endpoint registers a user.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUserModel">The user registration request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserDto</returns>
        UserDto RegisterUser(RegisterUserModel registerUserModel, int operationIndex = 0);

        /// <summary>
        /// Register new User
        /// </summary>
        /// <remarks>
        /// This endpoint registers a user.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUserModel">The user registration request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserDto</returns>
        ApiResponse<UserDto> RegisterUserWithHttpInfo(RegisterUserModel registerUserModel, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get EIP712 data to be signed
        /// </summary>
        /// <remarks>
        /// This endpoint return the typed data to be signed with EIP712 that is used on user registration.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="starkKey"></param>
        /// <param name="address"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegisterDetailsDto</returns>
        System.Threading.Tasks.Task<RegisterDetailsDto> EIP712DetailsAsync(string username, string starkKey, string address, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get EIP712 data to be signed
        /// </summary>
        /// <remarks>
        /// This endpoint return the typed data to be signed with EIP712 that is used on user registration.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="starkKey"></param>
        /// <param name="address"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegisterDetailsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegisterDetailsDto>> EIP712DetailsWithHttpInfoAsync(string username, string starkKey, string address, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get All Users
        /// </summary>
        /// <remarks>
        /// This endpoint fetches all users.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"></param>
        /// <param name="pageSize"></param>
        /// <param name="username"> (optional)</param>
        /// <param name="usernameComparison"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="creationDate"> (optional)</param>
        /// <param name="creationDateComparison"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserDto&gt;</returns>
        System.Threading.Tasks.Task<List<UserDto>> GetAllUsersAsync(int pageNumber, int pageSize, string username = default(string), FilterOptions? usernameComparison = default(FilterOptions?), string address = default(string), string creationDate = default(string), FilterOptions? creationDateComparison = default(FilterOptions?), string sortBy = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get All Users
        /// </summary>
        /// <remarks>
        /// This endpoint fetches all users.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"></param>
        /// <param name="pageSize"></param>
        /// <param name="username"> (optional)</param>
        /// <param name="usernameComparison"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="creationDate"> (optional)</param>
        /// <param name="creationDateComparison"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserDto>>> GetAllUsersWithHttpInfoAsync(int pageNumber, int pageSize, string username = default(string), FilterOptions? usernameComparison = default(FilterOptions?), string address = default(string), string creationDate = default(string), FilterOptions? creationDateComparison = default(FilterOptions?), string sortBy = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get User
        /// </summary>
        /// <remarks>
        /// This endpoint fetches a specific user by ID.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserWithVaultsDto</returns>
        System.Threading.Tasks.Task<UserWithVaultsDto> GetUserAsync(Guid userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get User
        /// </summary>
        /// <remarks>
        /// This endpoint fetches a specific user by ID.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserWithVaultsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserWithVaultsDto>> GetUserWithHttpInfoAsync(Guid userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Register new User
        /// </summary>
        /// <remarks>
        /// This endpoint registers a user.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUserModel">The user registration request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDto</returns>
        System.Threading.Tasks.Task<UserDto> RegisterUserAsync(RegisterUserModel registerUserModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Register new User
        /// </summary>
        /// <remarks>
        /// This endpoint registers a user.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUserModel">The user registration request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDto>> RegisterUserWithHttpInfoAsync(RegisterUserModel registerUserModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApi : IUserApiSync, IUserApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserApi : IUserApi
    {
        private StarkExpress.SDK.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi(string basePath)
        {
            this.Configuration = StarkExpress.SDK.Client.Client.Configuration.MergeConfigurations(
                StarkExpress.SDK.Client.Client.GlobalConfiguration.Instance,
                new StarkExpress.SDK.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new StarkExpress.SDK.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new StarkExpress.SDK.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = StarkExpress.SDK.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserApi(StarkExpress.SDK.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = StarkExpress.SDK.Client.Client.Configuration.MergeConfigurations(
                StarkExpress.SDK.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new StarkExpress.SDK.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new StarkExpress.SDK.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = StarkExpress.SDK.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UserApi(StarkExpress.SDK.Client.Client.ISynchronousClient client, StarkExpress.SDK.Client.Client.IAsynchronousClient asyncClient, StarkExpress.SDK.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = StarkExpress.SDK.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public StarkExpress.SDK.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public StarkExpress.SDK.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public StarkExpress.SDK.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public StarkExpress.SDK.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get EIP712 data to be signed This endpoint return the typed data to be signed with EIP712 that is used on user registration.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="starkKey"></param>
        /// <param name="address"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RegisterDetailsDto</returns>
        public RegisterDetailsDto EIP712Details(string username, string starkKey, string address, int operationIndex = 0)
        {
            StarkExpress.SDK.Client.Client.ApiResponse<RegisterDetailsDto> localVarResponse = EIP712DetailsWithHttpInfo(username, starkKey, address);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get EIP712 data to be signed This endpoint return the typed data to be signed with EIP712 that is used on user registration.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="starkKey"></param>
        /// <param name="address"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RegisterDetailsDto</returns>
        public StarkExpress.SDK.Client.Client.ApiResponse<RegisterDetailsDto> EIP712DetailsWithHttpInfo(string username, string starkKey, string address, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->EIP712Details");
            }

            // verify the required parameter 'starkKey' is set
            if (starkKey == null)
            {
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'starkKey' when calling UserApi->EIP712Details");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'address' when calling UserApi->EIP712Details");
            }

            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "stark_key", starkKey));
            localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "address", address));

            localVarRequestOptions.Operation = "UserApi.EIP712Details";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RegisterDetailsDto>("/api/v1/users/register-details", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EIP712Details", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get EIP712 data to be signed This endpoint return the typed data to be signed with EIP712 that is used on user registration.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="starkKey"></param>
        /// <param name="address"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegisterDetailsDto</returns>
        public async System.Threading.Tasks.Task<RegisterDetailsDto> EIP712DetailsAsync(string username, string starkKey, string address, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StarkExpress.SDK.Client.Client.ApiResponse<RegisterDetailsDto> localVarResponse = await EIP712DetailsWithHttpInfoAsync(username, starkKey, address, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get EIP712 data to be signed This endpoint return the typed data to be signed with EIP712 that is used on user registration.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username"></param>
        /// <param name="starkKey"></param>
        /// <param name="address"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegisterDetailsDto)</returns>
        public async System.Threading.Tasks.Task<StarkExpress.SDK.Client.Client.ApiResponse<RegisterDetailsDto>> EIP712DetailsWithHttpInfoAsync(string username, string starkKey, string address, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'username' when calling UserApi->EIP712Details");
            }

            // verify the required parameter 'starkKey' is set
            if (starkKey == null)
            {
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'starkKey' when calling UserApi->EIP712Details");
            }

            // verify the required parameter 'address' is set
            if (address == null)
            {
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'address' when calling UserApi->EIP712Details");
            }


            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "stark_key", starkKey));
            localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "address", address));

            localVarRequestOptions.Operation = "UserApi.EIP712Details";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RegisterDetailsDto>("/api/v1/users/register-details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EIP712Details", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All Users This endpoint fetches all users.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"></param>
        /// <param name="pageSize"></param>
        /// <param name="username"> (optional)</param>
        /// <param name="usernameComparison"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="creationDate"> (optional)</param>
        /// <param name="creationDateComparison"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;UserDto&gt;</returns>
        public List<UserDto> GetAllUsers(int pageNumber, int pageSize, string username = default(string), FilterOptions? usernameComparison = default(FilterOptions?), string address = default(string), string creationDate = default(string), FilterOptions? creationDateComparison = default(FilterOptions?), string sortBy = default(string), int operationIndex = 0)
        {
            StarkExpress.SDK.Client.Client.ApiResponse<List<UserDto>> localVarResponse = GetAllUsersWithHttpInfo(pageNumber, pageSize, username, usernameComparison, address, creationDate, creationDateComparison, sortBy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Users This endpoint fetches all users.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"></param>
        /// <param name="pageSize"></param>
        /// <param name="username"> (optional)</param>
        /// <param name="usernameComparison"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="creationDate"> (optional)</param>
        /// <param name="creationDateComparison"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;UserDto&gt;</returns>
        public StarkExpress.SDK.Client.Client.ApiResponse<List<UserDto>> GetAllUsersWithHttpInfo(int pageNumber, int pageSize, string username = default(string), FilterOptions? usernameComparison = default(FilterOptions?), string address = default(string), string creationDate = default(string), FilterOptions? creationDateComparison = default(FilterOptions?), string sortBy = default(string), int operationIndex = 0)
        {
            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            }
            if (usernameComparison != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "username_comparison", usernameComparison));
            }
            if (address != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "address", address));
            }
            if (creationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "creation_date", creationDate));
            }
            if (creationDateComparison != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "creation_date_comparison", creationDateComparison));
            }
            localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "page_number", pageNumber));
            localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }

            localVarRequestOptions.Operation = "UserApi.GetAllUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UserDto>>("/api/v1/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All Users This endpoint fetches all users.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"></param>
        /// <param name="pageSize"></param>
        /// <param name="username"> (optional)</param>
        /// <param name="usernameComparison"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="creationDate"> (optional)</param>
        /// <param name="creationDateComparison"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserDto>> GetAllUsersAsync(int pageNumber, int pageSize, string username = default(string), FilterOptions? usernameComparison = default(FilterOptions?), string address = default(string), string creationDate = default(string), FilterOptions? creationDateComparison = default(FilterOptions?), string sortBy = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StarkExpress.SDK.Client.Client.ApiResponse<List<UserDto>> localVarResponse = await GetAllUsersWithHttpInfoAsync(pageNumber, pageSize, username, usernameComparison, address, creationDate, creationDateComparison, sortBy, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Users This endpoint fetches all users.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"></param>
        /// <param name="pageSize"></param>
        /// <param name="username"> (optional)</param>
        /// <param name="usernameComparison"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="creationDate"> (optional)</param>
        /// <param name="creationDateComparison"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserDto&gt;)</returns>
        public async System.Threading.Tasks.Task<StarkExpress.SDK.Client.Client.ApiResponse<List<UserDto>>> GetAllUsersWithHttpInfoAsync(int pageNumber, int pageSize, string username = default(string), FilterOptions? usernameComparison = default(FilterOptions?), string address = default(string), string creationDate = default(string), FilterOptions? creationDateComparison = default(FilterOptions?), string sortBy = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            }
            if (usernameComparison != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "username_comparison", usernameComparison));
            }
            if (address != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "address", address));
            }
            if (creationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "creation_date", creationDate));
            }
            if (creationDateComparison != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "creation_date_comparison", creationDateComparison));
            }
            localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "page_number", pageNumber));
            localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }

            localVarRequestOptions.Operation = "UserApi.GetAllUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UserDto>>("/api/v1/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User This endpoint fetches a specific user by ID.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserWithVaultsDto</returns>
        public UserWithVaultsDto GetUser(Guid userId, int operationIndex = 0)
        {
            StarkExpress.SDK.Client.Client.ApiResponse<UserWithVaultsDto> localVarResponse = GetUserWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User This endpoint fetches a specific user by ID.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserWithVaultsDto</returns>
        public StarkExpress.SDK.Client.Client.ApiResponse<UserWithVaultsDto> GetUserWithHttpInfo(Guid userId, int operationIndex = 0)
        {
            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", StarkExpress.SDK.Client.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "UserApi.GetUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserWithVaultsDto>("/api/v1/users/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User This endpoint fetches a specific user by ID.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserWithVaultsDto</returns>
        public async System.Threading.Tasks.Task<UserWithVaultsDto> GetUserAsync(Guid userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StarkExpress.SDK.Client.Client.ApiResponse<UserWithVaultsDto> localVarResponse = await GetUserWithHttpInfoAsync(userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User This endpoint fetches a specific user by ID.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserWithVaultsDto)</returns>
        public async System.Threading.Tasks.Task<StarkExpress.SDK.Client.Client.ApiResponse<UserWithVaultsDto>> GetUserWithHttpInfoAsync(Guid userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userId", StarkExpress.SDK.Client.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "UserApi.GetUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserWithVaultsDto>("/api/v1/users/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register new User This endpoint registers a user.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUserModel">The user registration request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserDto</returns>
        public UserDto RegisterUser(RegisterUserModel registerUserModel, int operationIndex = 0)
        {
            StarkExpress.SDK.Client.Client.ApiResponse<UserDto> localVarResponse = RegisterUserWithHttpInfo(registerUserModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register new User This endpoint registers a user.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUserModel">The user registration request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserDto</returns>
        public StarkExpress.SDK.Client.Client.ApiResponse<UserDto> RegisterUserWithHttpInfo(RegisterUserModel registerUserModel, int operationIndex = 0)
        {
            // verify the required parameter 'registerUserModel' is set
            if (registerUserModel == null)
            {
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'registerUserModel' when calling UserApi->RegisterUser");
            }

            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = registerUserModel;

            localVarRequestOptions.Operation = "UserApi.RegisterUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UserDto>("/api/v1/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register new User This endpoint registers a user.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUserModel">The user registration request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDto</returns>
        public async System.Threading.Tasks.Task<UserDto> RegisterUserAsync(RegisterUserModel registerUserModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StarkExpress.SDK.Client.Client.ApiResponse<UserDto> localVarResponse = await RegisterUserWithHttpInfoAsync(registerUserModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register new User This endpoint registers a user.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUserModel">The user registration request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDto)</returns>
        public async System.Threading.Tasks.Task<StarkExpress.SDK.Client.Client.ApiResponse<UserDto>> RegisterUserWithHttpInfoAsync(RegisterUserModel registerUserModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'registerUserModel' is set
            if (registerUserModel == null)
            {
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'registerUserModel' when calling UserApi->RegisterUser");
            }


            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = registerUserModel;

            localVarRequestOptions.Operation = "UserApi.RegisterUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UserDto>("/api/v1/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
