/*
 * Arc API Docs
 *
 * An API for the Arc platform.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using StarkExpress.SDK.Client.Client;
using StarkExpress.SDK.Client.Model;

namespace StarkExpress.SDK.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketplaceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get buy order details
        /// </summary>
        /// <remarks>
        /// This endpoint returns the details for a buy order in the public marketplace.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyOrderDetailsModel">The buy order details request.</param>
        /// <returns>OrderDetailsDto</returns>
        OrderDetailsDto BuyOrderDetails(BuyOrderDetailsModel buyOrderDetailsModel);

        /// <summary>
        /// Get buy order details
        /// </summary>
        /// <remarks>
        /// This endpoint returns the details for a buy order in the public marketplace.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyOrderDetailsModel">The buy order details request.</param>
        /// <returns>ApiResponse of OrderDetailsDto</returns>
        ApiResponse<OrderDetailsDto> BuyOrderDetailsWithHttpInfo(BuyOrderDetailsModel buyOrderDetailsModel);
        /// <summary>
        /// Delete sell offer
        /// </summary>
        /// <remarks>
        /// This endpoint deletes a sell offer in the public marketplace.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offerId">The offer id.</param>
        /// <returns>OfferDto</returns>
        OfferDto DeleteSellOffer(Guid offerId);

        /// <summary>
        /// Delete sell offer
        /// </summary>
        /// <remarks>
        /// This endpoint deletes a sell offer in the public marketplace.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offerId">The offer id.</param>
        /// <returns>ApiResponse of OfferDto</returns>
        ApiResponse<OfferDto> DeleteSellOfferWithHttpInfo(Guid offerId);
        /// <summary>
        /// List buy orders
        /// </summary>
        /// <remarks>
        /// This endpoint returns a paginated list of buy orders in the public marketplace.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offerId"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <returns>MarketplaceOrderDtoPaginatedResponseDto</returns>
        MarketplaceOrderDtoPaginatedResponseDto ListBuyOrders(string offerId, int? pageNumber = default(int?), int? pageSize = default(int?), string sortBy = default(string));

        /// <summary>
        /// List buy orders
        /// </summary>
        /// <remarks>
        /// This endpoint returns a paginated list of buy orders in the public marketplace.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offerId"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <returns>ApiResponse of MarketplaceOrderDtoPaginatedResponseDto</returns>
        ApiResponse<MarketplaceOrderDtoPaginatedResponseDto> ListBuyOrdersWithHttpInfo(string offerId, int? pageNumber = default(int?), int? pageSize = default(int?), string sortBy = default(string));
        /// <summary>
        /// List sell offers
        /// </summary>
        /// <remarks>
        /// This endpoint returns a paginated list of sell offer in the public marketplace.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="offerStatus"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <returns>OfferDtoPaginatedResponseDto</returns>
        OfferDtoPaginatedResponseDto ListSellOffers(string productId, OfferStatus offerStatus = default(OfferStatus), string userId = default(string), int? pageNumber = default(int?), int? pageSize = default(int?), string sortBy = default(string));

        /// <summary>
        /// List sell offers
        /// </summary>
        /// <remarks>
        /// This endpoint returns a paginated list of sell offer in the public marketplace.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="offerStatus"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <returns>ApiResponse of OfferDtoPaginatedResponseDto</returns>
        ApiResponse<OfferDtoPaginatedResponseDto> ListSellOffersWithHttpInfo(string productId, OfferStatus offerStatus = default(OfferStatus), string userId = default(string), int? pageNumber = default(int?), int? pageSize = default(int?), string sortBy = default(string));
        /// <summary>
        /// Register buy order
        /// </summary>
        /// <remarks>
        /// This endpoint buys a product listed in the public marketplace.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerBuyOrderModel">The buy order registration request.</param>
        /// <returns>OfferDto</returns>
        OfferDto RegisterBuyOrder(RegisterBuyOrderModel registerBuyOrderModel);

        /// <summary>
        /// Register buy order
        /// </summary>
        /// <remarks>
        /// This endpoint buys a product listed in the public marketplace.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerBuyOrderModel">The buy order registration request.</param>
        /// <returns>ApiResponse of OfferDto</returns>
        ApiResponse<OfferDto> RegisterBuyOrderWithHttpInfo(RegisterBuyOrderModel registerBuyOrderModel);
        /// <summary>
        /// Register sell offer
        /// </summary>
        /// <remarks>
        /// This endpoint registers a sell offer in the public marketplace.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerSellOfferModel">The sell offer registration request.</param>
        /// <returns>OfferDto</returns>
        OfferDto RegisterSellOffer(RegisterSellOfferModel registerSellOfferModel);

        /// <summary>
        /// Register sell offer
        /// </summary>
        /// <remarks>
        /// This endpoint registers a sell offer in the public marketplace.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerSellOfferModel">The sell offer registration request.</param>
        /// <returns>ApiResponse of OfferDto</returns>
        ApiResponse<OfferDto> RegisterSellOfferWithHttpInfo(RegisterSellOfferModel registerSellOfferModel);
        /// <summary>
        /// Get sell offer details
        /// </summary>
        /// <remarks>
        /// This endpoint returns the details for a sell offer in the public marketplace.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellOfferDetailsModel">The sell offer details request.</param>
        /// <returns>OrderDetailsDto</returns>
        OrderDetailsDto SellOfferDetails(SellOfferDetailsModel sellOfferDetailsModel);

        /// <summary>
        /// Get sell offer details
        /// </summary>
        /// <remarks>
        /// This endpoint returns the details for a sell offer in the public marketplace.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellOfferDetailsModel">The sell offer details request.</param>
        /// <returns>ApiResponse of OrderDetailsDto</returns>
        ApiResponse<OrderDetailsDto> SellOfferDetailsWithHttpInfo(SellOfferDetailsModel sellOfferDetailsModel);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketplaceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get buy order details
        /// </summary>
        /// <remarks>
        /// This endpoint returns the details for a buy order in the public marketplace.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyOrderDetailsModel">The buy order details request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderDetailsDto</returns>
        System.Threading.Tasks.Task<OrderDetailsDto> BuyOrderDetailsAsync(BuyOrderDetailsModel buyOrderDetailsModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get buy order details
        /// </summary>
        /// <remarks>
        /// This endpoint returns the details for a buy order in the public marketplace.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyOrderDetailsModel">The buy order details request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderDetailsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderDetailsDto>> BuyOrderDetailsWithHttpInfoAsync(BuyOrderDetailsModel buyOrderDetailsModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete sell offer
        /// </summary>
        /// <remarks>
        /// This endpoint deletes a sell offer in the public marketplace.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offerId">The offer id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OfferDto</returns>
        System.Threading.Tasks.Task<OfferDto> DeleteSellOfferAsync(Guid offerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete sell offer
        /// </summary>
        /// <remarks>
        /// This endpoint deletes a sell offer in the public marketplace.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offerId">The offer id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OfferDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OfferDto>> DeleteSellOfferWithHttpInfoAsync(Guid offerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List buy orders
        /// </summary>
        /// <remarks>
        /// This endpoint returns a paginated list of buy orders in the public marketplace.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offerId"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketplaceOrderDtoPaginatedResponseDto</returns>
        System.Threading.Tasks.Task<MarketplaceOrderDtoPaginatedResponseDto> ListBuyOrdersAsync(string offerId, int? pageNumber = default(int?), int? pageSize = default(int?), string sortBy = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List buy orders
        /// </summary>
        /// <remarks>
        /// This endpoint returns a paginated list of buy orders in the public marketplace.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offerId"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketplaceOrderDtoPaginatedResponseDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketplaceOrderDtoPaginatedResponseDto>> ListBuyOrdersWithHttpInfoAsync(string offerId, int? pageNumber = default(int?), int? pageSize = default(int?), string sortBy = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List sell offers
        /// </summary>
        /// <remarks>
        /// This endpoint returns a paginated list of sell offer in the public marketplace.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="offerStatus"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OfferDtoPaginatedResponseDto</returns>
        System.Threading.Tasks.Task<OfferDtoPaginatedResponseDto> ListSellOffersAsync(string productId, OfferStatus offerStatus = default(OfferStatus), string userId = default(string), int? pageNumber = default(int?), int? pageSize = default(int?), string sortBy = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List sell offers
        /// </summary>
        /// <remarks>
        /// This endpoint returns a paginated list of sell offer in the public marketplace.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="offerStatus"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OfferDtoPaginatedResponseDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OfferDtoPaginatedResponseDto>> ListSellOffersWithHttpInfoAsync(string productId, OfferStatus offerStatus = default(OfferStatus), string userId = default(string), int? pageNumber = default(int?), int? pageSize = default(int?), string sortBy = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Register buy order
        /// </summary>
        /// <remarks>
        /// This endpoint buys a product listed in the public marketplace.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerBuyOrderModel">The buy order registration request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OfferDto</returns>
        System.Threading.Tasks.Task<OfferDto> RegisterBuyOrderAsync(RegisterBuyOrderModel registerBuyOrderModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Register buy order
        /// </summary>
        /// <remarks>
        /// This endpoint buys a product listed in the public marketplace.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerBuyOrderModel">The buy order registration request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OfferDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OfferDto>> RegisterBuyOrderWithHttpInfoAsync(RegisterBuyOrderModel registerBuyOrderModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Register sell offer
        /// </summary>
        /// <remarks>
        /// This endpoint registers a sell offer in the public marketplace.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerSellOfferModel">The sell offer registration request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OfferDto</returns>
        System.Threading.Tasks.Task<OfferDto> RegisterSellOfferAsync(RegisterSellOfferModel registerSellOfferModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Register sell offer
        /// </summary>
        /// <remarks>
        /// This endpoint registers a sell offer in the public marketplace.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerSellOfferModel">The sell offer registration request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OfferDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OfferDto>> RegisterSellOfferWithHttpInfoAsync(RegisterSellOfferModel registerSellOfferModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get sell offer details
        /// </summary>
        /// <remarks>
        /// This endpoint returns the details for a sell offer in the public marketplace.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellOfferDetailsModel">The sell offer details request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderDetailsDto</returns>
        System.Threading.Tasks.Task<OrderDetailsDto> SellOfferDetailsAsync(SellOfferDetailsModel sellOfferDetailsModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get sell offer details
        /// </summary>
        /// <remarks>
        /// This endpoint returns the details for a sell offer in the public marketplace.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellOfferDetailsModel">The sell offer details request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderDetailsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderDetailsDto>> SellOfferDetailsWithHttpInfoAsync(SellOfferDetailsModel sellOfferDetailsModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketplaceApi : IMarketplaceApiSync, IMarketplaceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MarketplaceApi : IDisposable, IMarketplaceApi
    {
        private StarkExpress.SDK.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public MarketplaceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public MarketplaceApi(string basePath)
        {
            this.Configuration = StarkExpress.SDK.Client.Client.Configuration.MergeConfigurations(
                StarkExpress.SDK.Client.Client.GlobalConfiguration.Instance,
                new StarkExpress.SDK.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new StarkExpress.SDK.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = StarkExpress.SDK.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public MarketplaceApi(StarkExpress.SDK.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = StarkExpress.SDK.Client.Client.Configuration.MergeConfigurations(
                StarkExpress.SDK.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new StarkExpress.SDK.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = StarkExpress.SDK.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MarketplaceApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MarketplaceApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = StarkExpress.SDK.Client.Client.Configuration.MergeConfigurations(
                StarkExpress.SDK.Client.Client.GlobalConfiguration.Instance,
                new StarkExpress.SDK.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new StarkExpress.SDK.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = StarkExpress.SDK.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MarketplaceApi(HttpClient client, StarkExpress.SDK.Client.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = StarkExpress.SDK.Client.Client.Configuration.MergeConfigurations(
                StarkExpress.SDK.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new StarkExpress.SDK.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = StarkExpress.SDK.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public MarketplaceApi(StarkExpress.SDK.Client.Client.ISynchronousClient client, StarkExpress.SDK.Client.Client.IAsynchronousClient asyncClient, StarkExpress.SDK.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = StarkExpress.SDK.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public StarkExpress.SDK.Client.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public StarkExpress.SDK.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public StarkExpress.SDK.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public StarkExpress.SDK.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public StarkExpress.SDK.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get buy order details This endpoint returns the details for a buy order in the public marketplace.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyOrderDetailsModel">The buy order details request.</param>
        /// <returns>OrderDetailsDto</returns>
        public OrderDetailsDto BuyOrderDetails(BuyOrderDetailsModel buyOrderDetailsModel)
        {
            StarkExpress.SDK.Client.Client.ApiResponse<OrderDetailsDto> localVarResponse = BuyOrderDetailsWithHttpInfo(buyOrderDetailsModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get buy order details This endpoint returns the details for a buy order in the public marketplace.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyOrderDetailsModel">The buy order details request.</param>
        /// <returns>ApiResponse of OrderDetailsDto</returns>
        public StarkExpress.SDK.Client.Client.ApiResponse<OrderDetailsDto> BuyOrderDetailsWithHttpInfo(BuyOrderDetailsModel buyOrderDetailsModel)
        {
            // verify the required parameter 'buyOrderDetailsModel' is set
            if (buyOrderDetailsModel == null)
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'buyOrderDetailsModel' when calling MarketplaceApi->BuyOrderDetails");

            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = buyOrderDetailsModel;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderDetailsDto>("/api/v1/marketplace/buy-details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuyOrderDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get buy order details This endpoint returns the details for a buy order in the public marketplace.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyOrderDetailsModel">The buy order details request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderDetailsDto</returns>
        public async System.Threading.Tasks.Task<OrderDetailsDto> BuyOrderDetailsAsync(BuyOrderDetailsModel buyOrderDetailsModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StarkExpress.SDK.Client.Client.ApiResponse<OrderDetailsDto> localVarResponse = await BuyOrderDetailsWithHttpInfoAsync(buyOrderDetailsModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get buy order details This endpoint returns the details for a buy order in the public marketplace.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyOrderDetailsModel">The buy order details request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderDetailsDto)</returns>
        public async System.Threading.Tasks.Task<StarkExpress.SDK.Client.Client.ApiResponse<OrderDetailsDto>> BuyOrderDetailsWithHttpInfoAsync(BuyOrderDetailsModel buyOrderDetailsModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'buyOrderDetailsModel' is set
            if (buyOrderDetailsModel == null)
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'buyOrderDetailsModel' when calling MarketplaceApi->BuyOrderDetails");


            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = buyOrderDetailsModel;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderDetailsDto>("/api/v1/marketplace/buy-details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuyOrderDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete sell offer This endpoint deletes a sell offer in the public marketplace.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offerId">The offer id.</param>
        /// <returns>OfferDto</returns>
        public OfferDto DeleteSellOffer(Guid offerId)
        {
            StarkExpress.SDK.Client.Client.ApiResponse<OfferDto> localVarResponse = DeleteSellOfferWithHttpInfo(offerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete sell offer This endpoint deletes a sell offer in the public marketplace.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offerId">The offer id.</param>
        /// <returns>ApiResponse of OfferDto</returns>
        public StarkExpress.SDK.Client.Client.ApiResponse<OfferDto> DeleteSellOfferWithHttpInfo(Guid offerId)
        {
            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("offerId", StarkExpress.SDK.Client.Client.ClientUtils.ParameterToString(offerId)); // path parameter

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<OfferDto>("/api/v1/marketplace/sell/{offerId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSellOffer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete sell offer This endpoint deletes a sell offer in the public marketplace.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offerId">The offer id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OfferDto</returns>
        public async System.Threading.Tasks.Task<OfferDto> DeleteSellOfferAsync(Guid offerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StarkExpress.SDK.Client.Client.ApiResponse<OfferDto> localVarResponse = await DeleteSellOfferWithHttpInfoAsync(offerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete sell offer This endpoint deletes a sell offer in the public marketplace.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offerId">The offer id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OfferDto)</returns>
        public async System.Threading.Tasks.Task<StarkExpress.SDK.Client.Client.ApiResponse<OfferDto>> DeleteSellOfferWithHttpInfoAsync(Guid offerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("offerId", StarkExpress.SDK.Client.Client.ClientUtils.ParameterToString(offerId)); // path parameter

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<OfferDto>("/api/v1/marketplace/sell/{offerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSellOffer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List buy orders This endpoint returns a paginated list of buy orders in the public marketplace.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offerId"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <returns>MarketplaceOrderDtoPaginatedResponseDto</returns>
        public MarketplaceOrderDtoPaginatedResponseDto ListBuyOrders(string offerId, int? pageNumber = default(int?), int? pageSize = default(int?), string sortBy = default(string))
        {
            StarkExpress.SDK.Client.Client.ApiResponse<MarketplaceOrderDtoPaginatedResponseDto> localVarResponse = ListBuyOrdersWithHttpInfo(offerId, pageNumber, pageSize, sortBy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List buy orders This endpoint returns a paginated list of buy orders in the public marketplace.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offerId"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <returns>ApiResponse of MarketplaceOrderDtoPaginatedResponseDto</returns>
        public StarkExpress.SDK.Client.Client.ApiResponse<MarketplaceOrderDtoPaginatedResponseDto> ListBuyOrdersWithHttpInfo(string offerId, int? pageNumber = default(int?), int? pageSize = default(int?), string sortBy = default(string))
        {
            // verify the required parameter 'offerId' is set
            if (offerId == null)
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'offerId' when calling MarketplaceApi->ListBuyOrders");

            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "offer_id", offerId));
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "page_number", pageNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MarketplaceOrderDtoPaginatedResponseDto>("/api/v1/marketplace/buy-orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBuyOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List buy orders This endpoint returns a paginated list of buy orders in the public marketplace.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offerId"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MarketplaceOrderDtoPaginatedResponseDto</returns>
        public async System.Threading.Tasks.Task<MarketplaceOrderDtoPaginatedResponseDto> ListBuyOrdersAsync(string offerId, int? pageNumber = default(int?), int? pageSize = default(int?), string sortBy = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StarkExpress.SDK.Client.Client.ApiResponse<MarketplaceOrderDtoPaginatedResponseDto> localVarResponse = await ListBuyOrdersWithHttpInfoAsync(offerId, pageNumber, pageSize, sortBy, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List buy orders This endpoint returns a paginated list of buy orders in the public marketplace.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offerId"></param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MarketplaceOrderDtoPaginatedResponseDto)</returns>
        public async System.Threading.Tasks.Task<StarkExpress.SDK.Client.Client.ApiResponse<MarketplaceOrderDtoPaginatedResponseDto>> ListBuyOrdersWithHttpInfoAsync(string offerId, int? pageNumber = default(int?), int? pageSize = default(int?), string sortBy = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'offerId' is set
            if (offerId == null)
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'offerId' when calling MarketplaceApi->ListBuyOrders");


            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "offer_id", offerId));
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "page_number", pageNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MarketplaceOrderDtoPaginatedResponseDto>("/api/v1/marketplace/buy-orders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBuyOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List sell offers This endpoint returns a paginated list of sell offer in the public marketplace.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="offerStatus"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <returns>OfferDtoPaginatedResponseDto</returns>
        public OfferDtoPaginatedResponseDto ListSellOffers(string productId, OfferStatus offerStatus = default(OfferStatus), string userId = default(string), int? pageNumber = default(int?), int? pageSize = default(int?), string sortBy = default(string))
        {
            StarkExpress.SDK.Client.Client.ApiResponse<OfferDtoPaginatedResponseDto> localVarResponse = ListSellOffersWithHttpInfo(productId, offerStatus, userId, pageNumber, pageSize, sortBy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List sell offers This endpoint returns a paginated list of sell offer in the public marketplace.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="offerStatus"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <returns>ApiResponse of OfferDtoPaginatedResponseDto</returns>
        public StarkExpress.SDK.Client.Client.ApiResponse<OfferDtoPaginatedResponseDto> ListSellOffersWithHttpInfo(string productId, OfferStatus offerStatus = default(OfferStatus), string userId = default(string), int? pageNumber = default(int?), int? pageSize = default(int?), string sortBy = default(string))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling MarketplaceApi->ListSellOffers");

            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offerStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "offer_status", offerStatus));
            }
            localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "page_number", pageNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OfferDtoPaginatedResponseDto>("/api/v1/marketplace/sell-offers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSellOffers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List sell offers This endpoint returns a paginated list of sell offer in the public marketplace.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="offerStatus"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OfferDtoPaginatedResponseDto</returns>
        public async System.Threading.Tasks.Task<OfferDtoPaginatedResponseDto> ListSellOffersAsync(string productId, OfferStatus offerStatus = default(OfferStatus), string userId = default(string), int? pageNumber = default(int?), int? pageSize = default(int?), string sortBy = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StarkExpress.SDK.Client.Client.ApiResponse<OfferDtoPaginatedResponseDto> localVarResponse = await ListSellOffersWithHttpInfoAsync(productId, offerStatus, userId, pageNumber, pageSize, sortBy, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List sell offers This endpoint returns a paginated list of sell offer in the public marketplace.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <param name="offerStatus"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OfferDtoPaginatedResponseDto)</returns>
        public async System.Threading.Tasks.Task<StarkExpress.SDK.Client.Client.ApiResponse<OfferDtoPaginatedResponseDto>> ListSellOffersWithHttpInfoAsync(string productId, OfferStatus offerStatus = default(OfferStatus), string userId = default(string), int? pageNumber = default(int?), int? pageSize = default(int?), string sortBy = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'productId' when calling MarketplaceApi->ListSellOffers");


            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offerStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "offer_status", offerStatus));
            }
            localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "product_id", productId));
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "page_number", pageNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OfferDtoPaginatedResponseDto>("/api/v1/marketplace/sell-offers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSellOffers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register buy order This endpoint buys a product listed in the public marketplace.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerBuyOrderModel">The buy order registration request.</param>
        /// <returns>OfferDto</returns>
        public OfferDto RegisterBuyOrder(RegisterBuyOrderModel registerBuyOrderModel)
        {
            StarkExpress.SDK.Client.Client.ApiResponse<OfferDto> localVarResponse = RegisterBuyOrderWithHttpInfo(registerBuyOrderModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register buy order This endpoint buys a product listed in the public marketplace.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerBuyOrderModel">The buy order registration request.</param>
        /// <returns>ApiResponse of OfferDto</returns>
        public StarkExpress.SDK.Client.Client.ApiResponse<OfferDto> RegisterBuyOrderWithHttpInfo(RegisterBuyOrderModel registerBuyOrderModel)
        {
            // verify the required parameter 'registerBuyOrderModel' is set
            if (registerBuyOrderModel == null)
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'registerBuyOrderModel' when calling MarketplaceApi->RegisterBuyOrder");

            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = registerBuyOrderModel;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OfferDto>("/api/v1/marketplace/buy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterBuyOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register buy order This endpoint buys a product listed in the public marketplace.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerBuyOrderModel">The buy order registration request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OfferDto</returns>
        public async System.Threading.Tasks.Task<OfferDto> RegisterBuyOrderAsync(RegisterBuyOrderModel registerBuyOrderModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StarkExpress.SDK.Client.Client.ApiResponse<OfferDto> localVarResponse = await RegisterBuyOrderWithHttpInfoAsync(registerBuyOrderModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register buy order This endpoint buys a product listed in the public marketplace.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerBuyOrderModel">The buy order registration request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OfferDto)</returns>
        public async System.Threading.Tasks.Task<StarkExpress.SDK.Client.Client.ApiResponse<OfferDto>> RegisterBuyOrderWithHttpInfoAsync(RegisterBuyOrderModel registerBuyOrderModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'registerBuyOrderModel' is set
            if (registerBuyOrderModel == null)
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'registerBuyOrderModel' when calling MarketplaceApi->RegisterBuyOrder");


            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = registerBuyOrderModel;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OfferDto>("/api/v1/marketplace/buy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterBuyOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register sell offer This endpoint registers a sell offer in the public marketplace.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerSellOfferModel">The sell offer registration request.</param>
        /// <returns>OfferDto</returns>
        public OfferDto RegisterSellOffer(RegisterSellOfferModel registerSellOfferModel)
        {
            StarkExpress.SDK.Client.Client.ApiResponse<OfferDto> localVarResponse = RegisterSellOfferWithHttpInfo(registerSellOfferModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register sell offer This endpoint registers a sell offer in the public marketplace.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerSellOfferModel">The sell offer registration request.</param>
        /// <returns>ApiResponse of OfferDto</returns>
        public StarkExpress.SDK.Client.Client.ApiResponse<OfferDto> RegisterSellOfferWithHttpInfo(RegisterSellOfferModel registerSellOfferModel)
        {
            // verify the required parameter 'registerSellOfferModel' is set
            if (registerSellOfferModel == null)
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'registerSellOfferModel' when calling MarketplaceApi->RegisterSellOffer");

            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = registerSellOfferModel;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OfferDto>("/api/v1/marketplace/sell", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterSellOffer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register sell offer This endpoint registers a sell offer in the public marketplace.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerSellOfferModel">The sell offer registration request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OfferDto</returns>
        public async System.Threading.Tasks.Task<OfferDto> RegisterSellOfferAsync(RegisterSellOfferModel registerSellOfferModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StarkExpress.SDK.Client.Client.ApiResponse<OfferDto> localVarResponse = await RegisterSellOfferWithHttpInfoAsync(registerSellOfferModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register sell offer This endpoint registers a sell offer in the public marketplace.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerSellOfferModel">The sell offer registration request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OfferDto)</returns>
        public async System.Threading.Tasks.Task<StarkExpress.SDK.Client.Client.ApiResponse<OfferDto>> RegisterSellOfferWithHttpInfoAsync(RegisterSellOfferModel registerSellOfferModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'registerSellOfferModel' is set
            if (registerSellOfferModel == null)
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'registerSellOfferModel' when calling MarketplaceApi->RegisterSellOffer");


            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = registerSellOfferModel;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OfferDto>("/api/v1/marketplace/sell", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterSellOffer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get sell offer details This endpoint returns the details for a sell offer in the public marketplace.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellOfferDetailsModel">The sell offer details request.</param>
        /// <returns>OrderDetailsDto</returns>
        public OrderDetailsDto SellOfferDetails(SellOfferDetailsModel sellOfferDetailsModel)
        {
            StarkExpress.SDK.Client.Client.ApiResponse<OrderDetailsDto> localVarResponse = SellOfferDetailsWithHttpInfo(sellOfferDetailsModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get sell offer details This endpoint returns the details for a sell offer in the public marketplace.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellOfferDetailsModel">The sell offer details request.</param>
        /// <returns>ApiResponse of OrderDetailsDto</returns>
        public StarkExpress.SDK.Client.Client.ApiResponse<OrderDetailsDto> SellOfferDetailsWithHttpInfo(SellOfferDetailsModel sellOfferDetailsModel)
        {
            // verify the required parameter 'sellOfferDetailsModel' is set
            if (sellOfferDetailsModel == null)
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'sellOfferDetailsModel' when calling MarketplaceApi->SellOfferDetails");

            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = sellOfferDetailsModel;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderDetailsDto>("/api/v1/marketplace/sell-details", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SellOfferDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get sell offer details This endpoint returns the details for a sell offer in the public marketplace.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellOfferDetailsModel">The sell offer details request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderDetailsDto</returns>
        public async System.Threading.Tasks.Task<OrderDetailsDto> SellOfferDetailsAsync(SellOfferDetailsModel sellOfferDetailsModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StarkExpress.SDK.Client.Client.ApiResponse<OrderDetailsDto> localVarResponse = await SellOfferDetailsWithHttpInfoAsync(sellOfferDetailsModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get sell offer details This endpoint returns the details for a sell offer in the public marketplace.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellOfferDetailsModel">The sell offer details request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderDetailsDto)</returns>
        public async System.Threading.Tasks.Task<StarkExpress.SDK.Client.Client.ApiResponse<OrderDetailsDto>> SellOfferDetailsWithHttpInfoAsync(SellOfferDetailsModel sellOfferDetailsModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sellOfferDetailsModel' is set
            if (sellOfferDetailsModel == null)
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'sellOfferDetailsModel' when calling MarketplaceApi->SellOfferDetails");


            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = sellOfferDetailsModel;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderDetailsDto>("/api/v1/marketplace/sell-details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SellOfferDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
