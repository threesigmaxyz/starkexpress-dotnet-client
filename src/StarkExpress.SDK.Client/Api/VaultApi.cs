/*
 * StarkExpress API Docs
 *
 * An API for the StarkExpress platform.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using StarkExpress.SDK.Client.Client;
using StarkExpress.SDK.Client.Client.Auth;
using StarkExpress.SDK.Client.Model;

namespace StarkExpress.SDK.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Allocate Vault
        /// </summary>
        /// <remarks>
        /// This endpoint allocates a vault for a given user, asset, and data availability mode.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocateVaultModel">The vault allocation request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AllocateVaultDto</returns>
        AllocateVaultDto AllocateVault(AllocateVaultModel allocateVaultModel, int operationIndex = 0);

        /// <summary>
        /// Allocate Vault
        /// </summary>
        /// <remarks>
        /// This endpoint allocates a vault for a given user, asset, and data availability mode.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocateVaultModel">The vault allocation request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AllocateVaultDto</returns>
        ApiResponse<AllocateVaultDto> AllocateVaultWithHttpInfo(AllocateVaultModel allocateVaultModel, int operationIndex = 0);
        /// <summary>
        /// Get All Vaults
        /// </summary>
        /// <remarks>
        /// This endpoint fetches all vaults in the system, with support for filters and pagination.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"></param>
        /// <param name="pageSize"></param>
        /// <param name="tenantId"> (optional)</param>
        /// <param name="assetId"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VaultDtoPaginatedResponseDto</returns>
        VaultDtoPaginatedResponseDto GetAllVaults(int pageNumber, int pageSize, Guid? tenantId = default(Guid?), Guid? assetId = default(Guid?), string sortBy = default(string), int operationIndex = 0);

        /// <summary>
        /// Get All Vaults
        /// </summary>
        /// <remarks>
        /// This endpoint fetches all vaults in the system, with support for filters and pagination.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"></param>
        /// <param name="pageSize"></param>
        /// <param name="tenantId"> (optional)</param>
        /// <param name="assetId"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VaultDtoPaginatedResponseDto</returns>
        ApiResponse<VaultDtoPaginatedResponseDto> GetAllVaultsWithHttpInfo(int pageNumber, int pageSize, Guid? tenantId = default(Guid?), Guid? assetId = default(Guid?), string sortBy = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Allocate Vault
        /// </summary>
        /// <remarks>
        /// This endpoint allocates a vault for a given user, asset, and data availability mode.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocateVaultModel">The vault allocation request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AllocateVaultDto</returns>
        System.Threading.Tasks.Task<AllocateVaultDto> AllocateVaultAsync(AllocateVaultModel allocateVaultModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Allocate Vault
        /// </summary>
        /// <remarks>
        /// This endpoint allocates a vault for a given user, asset, and data availability mode.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocateVaultModel">The vault allocation request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AllocateVaultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AllocateVaultDto>> AllocateVaultWithHttpInfoAsync(AllocateVaultModel allocateVaultModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get All Vaults
        /// </summary>
        /// <remarks>
        /// This endpoint fetches all vaults in the system, with support for filters and pagination.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"></param>
        /// <param name="pageSize"></param>
        /// <param name="tenantId"> (optional)</param>
        /// <param name="assetId"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VaultDtoPaginatedResponseDto</returns>
        System.Threading.Tasks.Task<VaultDtoPaginatedResponseDto> GetAllVaultsAsync(int pageNumber, int pageSize, Guid? tenantId = default(Guid?), Guid? assetId = default(Guid?), string sortBy = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get All Vaults
        /// </summary>
        /// <remarks>
        /// This endpoint fetches all vaults in the system, with support for filters and pagination.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"></param>
        /// <param name="pageSize"></param>
        /// <param name="tenantId"> (optional)</param>
        /// <param name="assetId"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VaultDtoPaginatedResponseDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<VaultDtoPaginatedResponseDto>> GetAllVaultsWithHttpInfoAsync(int pageNumber, int pageSize, Guid? tenantId = default(Guid?), Guid? assetId = default(Guid?), string sortBy = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVaultApi : IVaultApiSync, IVaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VaultApi : IVaultApi
    {
        private StarkExpress.SDK.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VaultApi(string basePath)
        {
            this.Configuration = StarkExpress.SDK.Client.Client.Configuration.MergeConfigurations(
                StarkExpress.SDK.Client.Client.GlobalConfiguration.Instance,
                new StarkExpress.SDK.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new StarkExpress.SDK.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new StarkExpress.SDK.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = StarkExpress.SDK.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VaultApi(StarkExpress.SDK.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = StarkExpress.SDK.Client.Client.Configuration.MergeConfigurations(
                StarkExpress.SDK.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new StarkExpress.SDK.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new StarkExpress.SDK.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = StarkExpress.SDK.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public VaultApi(StarkExpress.SDK.Client.Client.ISynchronousClient client, StarkExpress.SDK.Client.Client.IAsynchronousClient asyncClient, StarkExpress.SDK.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = StarkExpress.SDK.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public StarkExpress.SDK.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public StarkExpress.SDK.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public StarkExpress.SDK.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public StarkExpress.SDK.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Allocate Vault This endpoint allocates a vault for a given user, asset, and data availability mode.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocateVaultModel">The vault allocation request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AllocateVaultDto</returns>
        public AllocateVaultDto AllocateVault(AllocateVaultModel allocateVaultModel, int operationIndex = 0)
        {
            StarkExpress.SDK.Client.Client.ApiResponse<AllocateVaultDto> localVarResponse = AllocateVaultWithHttpInfo(allocateVaultModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Allocate Vault This endpoint allocates a vault for a given user, asset, and data availability mode.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocateVaultModel">The vault allocation request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AllocateVaultDto</returns>
        public StarkExpress.SDK.Client.Client.ApiResponse<AllocateVaultDto> AllocateVaultWithHttpInfo(AllocateVaultModel allocateVaultModel, int operationIndex = 0)
        {
            // verify the required parameter 'allocateVaultModel' is set
            if (allocateVaultModel == null)
            {
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'allocateVaultModel' when calling VaultApi->AllocateVault");
            }

            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = allocateVaultModel;

            localVarRequestOptions.Operation = "VaultApi.AllocateVault";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AllocateVaultDto>("/api/vaults", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AllocateVault", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Allocate Vault This endpoint allocates a vault for a given user, asset, and data availability mode.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocateVaultModel">The vault allocation request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AllocateVaultDto</returns>
        public async System.Threading.Tasks.Task<AllocateVaultDto> AllocateVaultAsync(AllocateVaultModel allocateVaultModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StarkExpress.SDK.Client.Client.ApiResponse<AllocateVaultDto> localVarResponse = await AllocateVaultWithHttpInfoAsync(allocateVaultModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Allocate Vault This endpoint allocates a vault for a given user, asset, and data availability mode.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocateVaultModel">The vault allocation request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AllocateVaultDto)</returns>
        public async System.Threading.Tasks.Task<StarkExpress.SDK.Client.Client.ApiResponse<AllocateVaultDto>> AllocateVaultWithHttpInfoAsync(AllocateVaultModel allocateVaultModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'allocateVaultModel' is set
            if (allocateVaultModel == null)
            {
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'allocateVaultModel' when calling VaultApi->AllocateVault");
            }


            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = allocateVaultModel;

            localVarRequestOptions.Operation = "VaultApi.AllocateVault";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AllocateVaultDto>("/api/vaults", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AllocateVault", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All Vaults This endpoint fetches all vaults in the system, with support for filters and pagination.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"></param>
        /// <param name="pageSize"></param>
        /// <param name="tenantId"> (optional)</param>
        /// <param name="assetId"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VaultDtoPaginatedResponseDto</returns>
        public VaultDtoPaginatedResponseDto GetAllVaults(int pageNumber, int pageSize, Guid? tenantId = default(Guid?), Guid? assetId = default(Guid?), string sortBy = default(string), int operationIndex = 0)
        {
            StarkExpress.SDK.Client.Client.ApiResponse<VaultDtoPaginatedResponseDto> localVarResponse = GetAllVaultsWithHttpInfo(pageNumber, pageSize, tenantId, assetId, sortBy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Vaults This endpoint fetches all vaults in the system, with support for filters and pagination.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"></param>
        /// <param name="pageSize"></param>
        /// <param name="tenantId"> (optional)</param>
        /// <param name="assetId"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VaultDtoPaginatedResponseDto</returns>
        public StarkExpress.SDK.Client.Client.ApiResponse<VaultDtoPaginatedResponseDto> GetAllVaultsWithHttpInfo(int pageNumber, int pageSize, Guid? tenantId = default(Guid?), Guid? assetId = default(Guid?), string sortBy = default(string), int operationIndex = 0)
        {
            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (tenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "tenant_id", tenantId));
            }
            if (assetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "asset_id", assetId));
            }
            localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "page_number", pageNumber));
            localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }

            localVarRequestOptions.Operation = "VaultApi.GetAllVaults";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<VaultDtoPaginatedResponseDto>("/api/vaults", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllVaults", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All Vaults This endpoint fetches all vaults in the system, with support for filters and pagination.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"></param>
        /// <param name="pageSize"></param>
        /// <param name="tenantId"> (optional)</param>
        /// <param name="assetId"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VaultDtoPaginatedResponseDto</returns>
        public async System.Threading.Tasks.Task<VaultDtoPaginatedResponseDto> GetAllVaultsAsync(int pageNumber, int pageSize, Guid? tenantId = default(Guid?), Guid? assetId = default(Guid?), string sortBy = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StarkExpress.SDK.Client.Client.ApiResponse<VaultDtoPaginatedResponseDto> localVarResponse = await GetAllVaultsWithHttpInfoAsync(pageNumber, pageSize, tenantId, assetId, sortBy, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Vaults This endpoint fetches all vaults in the system, with support for filters and pagination.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"></param>
        /// <param name="pageSize"></param>
        /// <param name="tenantId"> (optional)</param>
        /// <param name="assetId"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VaultDtoPaginatedResponseDto)</returns>
        public async System.Threading.Tasks.Task<StarkExpress.SDK.Client.Client.ApiResponse<VaultDtoPaginatedResponseDto>> GetAllVaultsWithHttpInfoAsync(int pageNumber, int pageSize, Guid? tenantId = default(Guid?), Guid? assetId = default(Guid?), string sortBy = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (tenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "tenant_id", tenantId));
            }
            if (assetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "asset_id", assetId));
            }
            localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "page_number", pageNumber));
            localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }

            localVarRequestOptions.Operation = "VaultApi.GetAllVaults";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VaultDtoPaginatedResponseDto>("/api/vaults", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllVaults", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
