/*
 * Arc API Docs
 *
 * An API for the Arc platform.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using StarkExpress.SDK.Client.Client;
using StarkExpress.SDK.Client.Model;

namespace StarkExpress.SDK.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deploy Asset
        /// </summary>
        /// <remarks>
        /// This endpoint allows for deploying an asset and enable it in the tenant system.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deployAssetModel">The asset deployment request.</param>
        /// <returns>TenantAssetDto</returns>
        TenantAssetDto DeployAsset(DeployAssetModel deployAssetModel);

        /// <summary>
        /// Deploy Asset
        /// </summary>
        /// <remarks>
        /// This endpoint allows for deploying an asset and enable it in the tenant system.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deployAssetModel">The asset deployment request.</param>
        /// <returns>ApiResponse of TenantAssetDto</returns>
        ApiResponse<TenantAssetDto> DeployAssetWithHttpInfo(DeployAssetModel deployAssetModel);
        /// <summary>
        /// Disable Asset
        /// </summary>
        /// <remarks>
        /// This endpoint allows to disable an asset in the tenant system.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableAssetModel">The asset disabling request.</param>
        /// <returns>TenantAssetDto</returns>
        TenantAssetDto DisableAsset(DisableAssetModel disableAssetModel);

        /// <summary>
        /// Disable Asset
        /// </summary>
        /// <remarks>
        /// This endpoint allows to disable an asset in the tenant system.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableAssetModel">The asset disabling request.</param>
        /// <returns>ApiResponse of TenantAssetDto</returns>
        ApiResponse<TenantAssetDto> DisableAssetWithHttpInfo(DisableAssetModel disableAssetModel);
        /// <summary>
        /// Enable Asset
        /// </summary>
        /// <remarks>
        /// This endpoint allows to enable an asset in the tenant system.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableAssetModel">The asset enabling request.</param>
        /// <returns>TenantAssetDto</returns>
        TenantAssetDto EnableAsset(EnableAssetModel enableAssetModel);

        /// <summary>
        /// Enable Asset
        /// </summary>
        /// <remarks>
        /// This endpoint allows to enable an asset in the tenant system.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableAssetModel">The asset enabling request.</param>
        /// <returns>ApiResponse of TenantAssetDto</returns>
        ApiResponse<TenantAssetDto> EnableAssetWithHttpInfo(EnableAssetModel enableAssetModel);
        /// <summary>
        /// Estimate cost of the deployment for a new Asset
        /// </summary>
        /// <remarks>
        /// This endpoint allows for deploying an asset and enable it in the tenant system.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetType"></param>
        /// <returns>TenantAssetDto</returns>
        TenantAssetDto EstimateAssetDeployCost(AssetType assetType);

        /// <summary>
        /// Estimate cost of the deployment for a new Asset
        /// </summary>
        /// <remarks>
        /// This endpoint allows for deploying an asset and enable it in the tenant system.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetType"></param>
        /// <returns>ApiResponse of TenantAssetDto</returns>
        ApiResponse<TenantAssetDto> EstimateAssetDeployCostWithHttpInfo(AssetType assetType);
        /// <summary>
        /// Get All Assets
        /// </summary>
        /// <remarks>
        /// This endpoint fetches all assets enabled in the tenant system, with support for filters and pagination.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"> (optional)</param>
        /// <param name="assetType"> (optional)</param>
        /// <param name="assetTypeComparison"> (optional)</param>
        /// <param name="assetSymbol"> (optional)</param>
        /// <param name="assetSymbolComparison"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <returns>TenantAssetDtoPaginatedResponseDto</returns>
        TenantAssetDtoPaginatedResponseDto GetAllAssets(Guid? assetId = default(Guid?), AssetType assetType = default(AssetType), FilterOptions assetTypeComparison = default(FilterOptions), string assetSymbol = default(string), FilterOptions assetSymbolComparison = default(FilterOptions), int? pageNumber = default(int?), int? pageSize = default(int?), string sortBy = default(string));

        /// <summary>
        /// Get All Assets
        /// </summary>
        /// <remarks>
        /// This endpoint fetches all assets enabled in the tenant system, with support for filters and pagination.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"> (optional)</param>
        /// <param name="assetType"> (optional)</param>
        /// <param name="assetTypeComparison"> (optional)</param>
        /// <param name="assetSymbol"> (optional)</param>
        /// <param name="assetSymbolComparison"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <returns>ApiResponse of TenantAssetDtoPaginatedResponseDto</returns>
        ApiResponse<TenantAssetDtoPaginatedResponseDto> GetAllAssetsWithHttpInfo(Guid? assetId = default(Guid?), AssetType assetType = default(AssetType), FilterOptions assetTypeComparison = default(FilterOptions), string assetSymbol = default(string), FilterOptions assetSymbolComparison = default(FilterOptions), int? pageNumber = default(int?), int? pageSize = default(int?), string sortBy = default(string));
        /// <summary>
        /// Get Asset
        /// </summary>
        /// <remarks>
        /// This endpoint fetches a specific enabled asset by ID.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset ID.</param>
        /// <returns>TenantAssetDto</returns>
        TenantAssetDto GetAsset(Guid assetId);

        /// <summary>
        /// Get Asset
        /// </summary>
        /// <remarks>
        /// This endpoint fetches a specific enabled asset by ID.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset ID.</param>
        /// <returns>ApiResponse of TenantAssetDto</returns>
        ApiResponse<TenantAssetDto> GetAssetWithHttpInfo(Guid assetId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Deploy Asset
        /// </summary>
        /// <remarks>
        /// This endpoint allows for deploying an asset and enable it in the tenant system.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deployAssetModel">The asset deployment request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantAssetDto</returns>
        System.Threading.Tasks.Task<TenantAssetDto> DeployAssetAsync(DeployAssetModel deployAssetModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deploy Asset
        /// </summary>
        /// <remarks>
        /// This endpoint allows for deploying an asset and enable it in the tenant system.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deployAssetModel">The asset deployment request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantAssetDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TenantAssetDto>> DeployAssetWithHttpInfoAsync(DeployAssetModel deployAssetModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Disable Asset
        /// </summary>
        /// <remarks>
        /// This endpoint allows to disable an asset in the tenant system.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableAssetModel">The asset disabling request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantAssetDto</returns>
        System.Threading.Tasks.Task<TenantAssetDto> DisableAssetAsync(DisableAssetModel disableAssetModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Disable Asset
        /// </summary>
        /// <remarks>
        /// This endpoint allows to disable an asset in the tenant system.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableAssetModel">The asset disabling request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantAssetDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TenantAssetDto>> DisableAssetWithHttpInfoAsync(DisableAssetModel disableAssetModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Enable Asset
        /// </summary>
        /// <remarks>
        /// This endpoint allows to enable an asset in the tenant system.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableAssetModel">The asset enabling request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantAssetDto</returns>
        System.Threading.Tasks.Task<TenantAssetDto> EnableAssetAsync(EnableAssetModel enableAssetModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Enable Asset
        /// </summary>
        /// <remarks>
        /// This endpoint allows to enable an asset in the tenant system.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableAssetModel">The asset enabling request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantAssetDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TenantAssetDto>> EnableAssetWithHttpInfoAsync(EnableAssetModel enableAssetModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Estimate cost of the deployment for a new Asset
        /// </summary>
        /// <remarks>
        /// This endpoint allows for deploying an asset and enable it in the tenant system.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantAssetDto</returns>
        System.Threading.Tasks.Task<TenantAssetDto> EstimateAssetDeployCostAsync(AssetType assetType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Estimate cost of the deployment for a new Asset
        /// </summary>
        /// <remarks>
        /// This endpoint allows for deploying an asset and enable it in the tenant system.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantAssetDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TenantAssetDto>> EstimateAssetDeployCostWithHttpInfoAsync(AssetType assetType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get All Assets
        /// </summary>
        /// <remarks>
        /// This endpoint fetches all assets enabled in the tenant system, with support for filters and pagination.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"> (optional)</param>
        /// <param name="assetType"> (optional)</param>
        /// <param name="assetTypeComparison"> (optional)</param>
        /// <param name="assetSymbol"> (optional)</param>
        /// <param name="assetSymbolComparison"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantAssetDtoPaginatedResponseDto</returns>
        System.Threading.Tasks.Task<TenantAssetDtoPaginatedResponseDto> GetAllAssetsAsync(Guid? assetId = default(Guid?), AssetType assetType = default(AssetType), FilterOptions assetTypeComparison = default(FilterOptions), string assetSymbol = default(string), FilterOptions assetSymbolComparison = default(FilterOptions), int? pageNumber = default(int?), int? pageSize = default(int?), string sortBy = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get All Assets
        /// </summary>
        /// <remarks>
        /// This endpoint fetches all assets enabled in the tenant system, with support for filters and pagination.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"> (optional)</param>
        /// <param name="assetType"> (optional)</param>
        /// <param name="assetTypeComparison"> (optional)</param>
        /// <param name="assetSymbol"> (optional)</param>
        /// <param name="assetSymbolComparison"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantAssetDtoPaginatedResponseDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TenantAssetDtoPaginatedResponseDto>> GetAllAssetsWithHttpInfoAsync(Guid? assetId = default(Guid?), AssetType assetType = default(AssetType), FilterOptions assetTypeComparison = default(FilterOptions), string assetSymbol = default(string), FilterOptions assetSymbolComparison = default(FilterOptions), int? pageNumber = default(int?), int? pageSize = default(int?), string sortBy = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Asset
        /// </summary>
        /// <remarks>
        /// This endpoint fetches a specific enabled asset by ID.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantAssetDto</returns>
        System.Threading.Tasks.Task<TenantAssetDto> GetAssetAsync(Guid assetId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Asset
        /// </summary>
        /// <remarks>
        /// This endpoint fetches a specific enabled asset by ID.
        /// </remarks>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantAssetDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<TenantAssetDto>> GetAssetWithHttpInfoAsync(Guid assetId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetApi : IAssetApiSync, IAssetApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AssetApi : IDisposable, IAssetApi
    {
        private StarkExpress.SDK.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AssetApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AssetApi(string basePath)
        {
            this.Configuration = StarkExpress.SDK.Client.Client.Configuration.MergeConfigurations(
                StarkExpress.SDK.Client.Client.GlobalConfiguration.Instance,
                new StarkExpress.SDK.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new StarkExpress.SDK.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = StarkExpress.SDK.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AssetApi(StarkExpress.SDK.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = StarkExpress.SDK.Client.Client.Configuration.MergeConfigurations(
                StarkExpress.SDK.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new StarkExpress.SDK.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = StarkExpress.SDK.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AssetApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AssetApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = StarkExpress.SDK.Client.Client.Configuration.MergeConfigurations(
                StarkExpress.SDK.Client.Client.GlobalConfiguration.Instance,
                new StarkExpress.SDK.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new StarkExpress.SDK.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = StarkExpress.SDK.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AssetApi(HttpClient client, StarkExpress.SDK.Client.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = StarkExpress.SDK.Client.Client.Configuration.MergeConfigurations(
                StarkExpress.SDK.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new StarkExpress.SDK.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = StarkExpress.SDK.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AssetApi(StarkExpress.SDK.Client.Client.ISynchronousClient client, StarkExpress.SDK.Client.Client.IAsynchronousClient asyncClient, StarkExpress.SDK.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = StarkExpress.SDK.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public StarkExpress.SDK.Client.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public StarkExpress.SDK.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public StarkExpress.SDK.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public StarkExpress.SDK.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public StarkExpress.SDK.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Deploy Asset This endpoint allows for deploying an asset and enable it in the tenant system.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deployAssetModel">The asset deployment request.</param>
        /// <returns>TenantAssetDto</returns>
        public TenantAssetDto DeployAsset(DeployAssetModel deployAssetModel)
        {
            StarkExpress.SDK.Client.Client.ApiResponse<TenantAssetDto> localVarResponse = DeployAssetWithHttpInfo(deployAssetModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deploy Asset This endpoint allows for deploying an asset and enable it in the tenant system.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deployAssetModel">The asset deployment request.</param>
        /// <returns>ApiResponse of TenantAssetDto</returns>
        public StarkExpress.SDK.Client.Client.ApiResponse<TenantAssetDto> DeployAssetWithHttpInfo(DeployAssetModel deployAssetModel)
        {
            // verify the required parameter 'deployAssetModel' is set
            if (deployAssetModel == null)
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'deployAssetModel' when calling AssetApi->DeployAsset");

            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = deployAssetModel;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TenantAssetDto>("/api/v1/assets/deploy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeployAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deploy Asset This endpoint allows for deploying an asset and enable it in the tenant system.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deployAssetModel">The asset deployment request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantAssetDto</returns>
        public async System.Threading.Tasks.Task<TenantAssetDto> DeployAssetAsync(DeployAssetModel deployAssetModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StarkExpress.SDK.Client.Client.ApiResponse<TenantAssetDto> localVarResponse = await DeployAssetWithHttpInfoAsync(deployAssetModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deploy Asset This endpoint allows for deploying an asset and enable it in the tenant system.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deployAssetModel">The asset deployment request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantAssetDto)</returns>
        public async System.Threading.Tasks.Task<StarkExpress.SDK.Client.Client.ApiResponse<TenantAssetDto>> DeployAssetWithHttpInfoAsync(DeployAssetModel deployAssetModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deployAssetModel' is set
            if (deployAssetModel == null)
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'deployAssetModel' when calling AssetApi->DeployAsset");


            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = deployAssetModel;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TenantAssetDto>("/api/v1/assets/deploy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeployAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disable Asset This endpoint allows to disable an asset in the tenant system.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableAssetModel">The asset disabling request.</param>
        /// <returns>TenantAssetDto</returns>
        public TenantAssetDto DisableAsset(DisableAssetModel disableAssetModel)
        {
            StarkExpress.SDK.Client.Client.ApiResponse<TenantAssetDto> localVarResponse = DisableAssetWithHttpInfo(disableAssetModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Disable Asset This endpoint allows to disable an asset in the tenant system.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableAssetModel">The asset disabling request.</param>
        /// <returns>ApiResponse of TenantAssetDto</returns>
        public StarkExpress.SDK.Client.Client.ApiResponse<TenantAssetDto> DisableAssetWithHttpInfo(DisableAssetModel disableAssetModel)
        {
            // verify the required parameter 'disableAssetModel' is set
            if (disableAssetModel == null)
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'disableAssetModel' when calling AssetApi->DisableAsset");

            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = disableAssetModel;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TenantAssetDto>("/api/v1/assets/disable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisableAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disable Asset This endpoint allows to disable an asset in the tenant system.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableAssetModel">The asset disabling request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantAssetDto</returns>
        public async System.Threading.Tasks.Task<TenantAssetDto> DisableAssetAsync(DisableAssetModel disableAssetModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StarkExpress.SDK.Client.Client.ApiResponse<TenantAssetDto> localVarResponse = await DisableAssetWithHttpInfoAsync(disableAssetModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Disable Asset This endpoint allows to disable an asset in the tenant system.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableAssetModel">The asset disabling request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantAssetDto)</returns>
        public async System.Threading.Tasks.Task<StarkExpress.SDK.Client.Client.ApiResponse<TenantAssetDto>> DisableAssetWithHttpInfoAsync(DisableAssetModel disableAssetModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'disableAssetModel' is set
            if (disableAssetModel == null)
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'disableAssetModel' when calling AssetApi->DisableAsset");


            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = disableAssetModel;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TenantAssetDto>("/api/v1/assets/disable", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisableAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enable Asset This endpoint allows to enable an asset in the tenant system.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableAssetModel">The asset enabling request.</param>
        /// <returns>TenantAssetDto</returns>
        public TenantAssetDto EnableAsset(EnableAssetModel enableAssetModel)
        {
            StarkExpress.SDK.Client.Client.ApiResponse<TenantAssetDto> localVarResponse = EnableAssetWithHttpInfo(enableAssetModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enable Asset This endpoint allows to enable an asset in the tenant system.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableAssetModel">The asset enabling request.</param>
        /// <returns>ApiResponse of TenantAssetDto</returns>
        public StarkExpress.SDK.Client.Client.ApiResponse<TenantAssetDto> EnableAssetWithHttpInfo(EnableAssetModel enableAssetModel)
        {
            // verify the required parameter 'enableAssetModel' is set
            if (enableAssetModel == null)
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'enableAssetModel' when calling AssetApi->EnableAsset");

            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = enableAssetModel;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TenantAssetDto>("/api/v1/assets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnableAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enable Asset This endpoint allows to enable an asset in the tenant system.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableAssetModel">The asset enabling request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantAssetDto</returns>
        public async System.Threading.Tasks.Task<TenantAssetDto> EnableAssetAsync(EnableAssetModel enableAssetModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StarkExpress.SDK.Client.Client.ApiResponse<TenantAssetDto> localVarResponse = await EnableAssetWithHttpInfoAsync(enableAssetModel, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enable Asset This endpoint allows to enable an asset in the tenant system.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableAssetModel">The asset enabling request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantAssetDto)</returns>
        public async System.Threading.Tasks.Task<StarkExpress.SDK.Client.Client.ApiResponse<TenantAssetDto>> EnableAssetWithHttpInfoAsync(EnableAssetModel enableAssetModel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'enableAssetModel' is set
            if (enableAssetModel == null)
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'enableAssetModel' when calling AssetApi->EnableAsset");


            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = enableAssetModel;

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TenantAssetDto>("/api/v1/assets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnableAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Estimate cost of the deployment for a new Asset This endpoint allows for deploying an asset and enable it in the tenant system.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetType"></param>
        /// <returns>TenantAssetDto</returns>
        public TenantAssetDto EstimateAssetDeployCost(AssetType assetType)
        {
            StarkExpress.SDK.Client.Client.ApiResponse<TenantAssetDto> localVarResponse = EstimateAssetDeployCostWithHttpInfo(assetType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Estimate cost of the deployment for a new Asset This endpoint allows for deploying an asset and enable it in the tenant system.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetType"></param>
        /// <returns>ApiResponse of TenantAssetDto</returns>
        public StarkExpress.SDK.Client.Client.ApiResponse<TenantAssetDto> EstimateAssetDeployCostWithHttpInfo(AssetType assetType)
        {
            // verify the required parameter 'assetType' is set
            if (assetType == null)
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'assetType' when calling AssetApi->EstimateAssetDeployCost");

            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "asset_type", assetType));

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TenantAssetDto>("/api/v1/assets/estimate-deploy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EstimateAssetDeployCost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Estimate cost of the deployment for a new Asset This endpoint allows for deploying an asset and enable it in the tenant system.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantAssetDto</returns>
        public async System.Threading.Tasks.Task<TenantAssetDto> EstimateAssetDeployCostAsync(AssetType assetType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StarkExpress.SDK.Client.Client.ApiResponse<TenantAssetDto> localVarResponse = await EstimateAssetDeployCostWithHttpInfoAsync(assetType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Estimate cost of the deployment for a new Asset This endpoint allows for deploying an asset and enable it in the tenant system.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantAssetDto)</returns>
        public async System.Threading.Tasks.Task<StarkExpress.SDK.Client.Client.ApiResponse<TenantAssetDto>> EstimateAssetDeployCostWithHttpInfoAsync(AssetType assetType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetType' is set
            if (assetType == null)
                throw new StarkExpress.SDK.Client.Client.ApiException(400, "Missing required parameter 'assetType' when calling AssetApi->EstimateAssetDeployCost");


            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "asset_type", assetType));

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TenantAssetDto>("/api/v1/assets/estimate-deploy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EstimateAssetDeployCost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All Assets This endpoint fetches all assets enabled in the tenant system, with support for filters and pagination.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"> (optional)</param>
        /// <param name="assetType"> (optional)</param>
        /// <param name="assetTypeComparison"> (optional)</param>
        /// <param name="assetSymbol"> (optional)</param>
        /// <param name="assetSymbolComparison"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <returns>TenantAssetDtoPaginatedResponseDto</returns>
        public TenantAssetDtoPaginatedResponseDto GetAllAssets(Guid? assetId = default(Guid?), AssetType assetType = default(AssetType), FilterOptions assetTypeComparison = default(FilterOptions), string assetSymbol = default(string), FilterOptions assetSymbolComparison = default(FilterOptions), int? pageNumber = default(int?), int? pageSize = default(int?), string sortBy = default(string))
        {
            StarkExpress.SDK.Client.Client.ApiResponse<TenantAssetDtoPaginatedResponseDto> localVarResponse = GetAllAssetsWithHttpInfo(assetId, assetType, assetTypeComparison, assetSymbol, assetSymbolComparison, pageNumber, pageSize, sortBy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Assets This endpoint fetches all assets enabled in the tenant system, with support for filters and pagination.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"> (optional)</param>
        /// <param name="assetType"> (optional)</param>
        /// <param name="assetTypeComparison"> (optional)</param>
        /// <param name="assetSymbol"> (optional)</param>
        /// <param name="assetSymbolComparison"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <returns>ApiResponse of TenantAssetDtoPaginatedResponseDto</returns>
        public StarkExpress.SDK.Client.Client.ApiResponse<TenantAssetDtoPaginatedResponseDto> GetAllAssetsWithHttpInfo(Guid? assetId = default(Guid?), AssetType assetType = default(AssetType), FilterOptions assetTypeComparison = default(FilterOptions), string assetSymbol = default(string), FilterOptions assetSymbolComparison = default(FilterOptions), int? pageNumber = default(int?), int? pageSize = default(int?), string sortBy = default(string))
        {
            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (assetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "asset_id", assetId));
            }
            if (assetType != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "asset_type", assetType));
            }
            if (assetTypeComparison != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "asset_type_comparison", assetTypeComparison));
            }
            if (assetSymbol != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "asset_symbol", assetSymbol));
            }
            if (assetSymbolComparison != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "asset_symbol_comparison", assetSymbolComparison));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "page_number", pageNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TenantAssetDtoPaginatedResponseDto>("/api/v1/assets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllAssets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All Assets This endpoint fetches all assets enabled in the tenant system, with support for filters and pagination.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"> (optional)</param>
        /// <param name="assetType"> (optional)</param>
        /// <param name="assetTypeComparison"> (optional)</param>
        /// <param name="assetSymbol"> (optional)</param>
        /// <param name="assetSymbolComparison"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantAssetDtoPaginatedResponseDto</returns>
        public async System.Threading.Tasks.Task<TenantAssetDtoPaginatedResponseDto> GetAllAssetsAsync(Guid? assetId = default(Guid?), AssetType assetType = default(AssetType), FilterOptions assetTypeComparison = default(FilterOptions), string assetSymbol = default(string), FilterOptions assetSymbolComparison = default(FilterOptions), int? pageNumber = default(int?), int? pageSize = default(int?), string sortBy = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StarkExpress.SDK.Client.Client.ApiResponse<TenantAssetDtoPaginatedResponseDto> localVarResponse = await GetAllAssetsWithHttpInfoAsync(assetId, assetType, assetTypeComparison, assetSymbol, assetSymbolComparison, pageNumber, pageSize, sortBy, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Assets This endpoint fetches all assets enabled in the tenant system, with support for filters and pagination.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId"> (optional)</param>
        /// <param name="assetType"> (optional)</param>
        /// <param name="assetTypeComparison"> (optional)</param>
        /// <param name="assetSymbol"> (optional)</param>
        /// <param name="assetSymbolComparison"> (optional)</param>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantAssetDtoPaginatedResponseDto)</returns>
        public async System.Threading.Tasks.Task<StarkExpress.SDK.Client.Client.ApiResponse<TenantAssetDtoPaginatedResponseDto>> GetAllAssetsWithHttpInfoAsync(Guid? assetId = default(Guid?), AssetType assetType = default(AssetType), FilterOptions assetTypeComparison = default(FilterOptions), string assetSymbol = default(string), FilterOptions assetSymbolComparison = default(FilterOptions), int? pageNumber = default(int?), int? pageSize = default(int?), string sortBy = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (assetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "asset_id", assetId));
            }
            if (assetType != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "asset_type", assetType));
            }
            if (assetTypeComparison != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "asset_type_comparison", assetTypeComparison));
            }
            if (assetSymbol != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "asset_symbol", assetSymbol));
            }
            if (assetSymbolComparison != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "asset_symbol_comparison", assetSymbolComparison));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "page_number", pageNumber));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(StarkExpress.SDK.Client.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TenantAssetDtoPaginatedResponseDto>("/api/v1/assets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllAssets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Asset This endpoint fetches a specific enabled asset by ID.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset ID.</param>
        /// <returns>TenantAssetDto</returns>
        public TenantAssetDto GetAsset(Guid assetId)
        {
            StarkExpress.SDK.Client.Client.ApiResponse<TenantAssetDto> localVarResponse = GetAssetWithHttpInfo(assetId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Asset This endpoint fetches a specific enabled asset by ID.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset ID.</param>
        /// <returns>ApiResponse of TenantAssetDto</returns>
        public StarkExpress.SDK.Client.Client.ApiResponse<TenantAssetDto> GetAssetWithHttpInfo(Guid assetId)
        {
            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("assetId", StarkExpress.SDK.Client.Client.ClientUtils.ParameterToString(assetId)); // path parameter

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TenantAssetDto>("/api/v1/assets/{assetId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Asset This endpoint fetches a specific enabled asset by ID.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantAssetDto</returns>
        public async System.Threading.Tasks.Task<TenantAssetDto> GetAssetAsync(Guid assetId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            StarkExpress.SDK.Client.Client.ApiResponse<TenantAssetDto> localVarResponse = await GetAssetWithHttpInfoAsync(assetId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Asset This endpoint fetches a specific enabled asset by ID.
        /// </summary>
        /// <exception cref="StarkExpress.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantAssetDto)</returns>
        public async System.Threading.Tasks.Task<StarkExpress.SDK.Client.Client.ApiResponse<TenantAssetDto>> GetAssetWithHttpInfoAsync(Guid assetId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            StarkExpress.SDK.Client.Client.RequestOptions localVarRequestOptions = new StarkExpress.SDK.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = StarkExpress.SDK.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("assetId", StarkExpress.SDK.Client.Client.ClientUtils.ParameterToString(assetId)); // path parameter

            // authentication (apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TenantAssetDto>("/api/v1/assets/{assetId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
